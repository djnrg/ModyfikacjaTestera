//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Tester_VFS169 {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DatabaseDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DatabaseDataSet : global::System.Data.DataSet {
        
        private TestCommentsDataTable tableTestComments;
        
        private TestDescriptionInputDataTable tableTestDescriptionInput;
        
        private TestDescriptionSetupDataTable tableTestDescriptionSetup;
        
        private TestParametersDataTable tableTestParameters;
        
        private ShotTestInfoDataTable tableShotTestInfo;
        
        private ToReportAllParametersDataTable tableToReportAllParameters;
        
        private global::System.Data.DataRelation relationFK_TestComments_TestDescriptionInput;
        
        private global::System.Data.DataRelation relationFK_TestDescriptionInput_TestDescriptionSetup1;
        
        private global::System.Data.DataRelation relationFK_TestParameters_TestDescriptionInput;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public DatabaseDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected DatabaseDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TestComments"] != null)) {
                    base.Tables.Add(new TestCommentsDataTable(ds.Tables["TestComments"]));
                }
                if ((ds.Tables["TestDescriptionInput"] != null)) {
                    base.Tables.Add(new TestDescriptionInputDataTable(ds.Tables["TestDescriptionInput"]));
                }
                if ((ds.Tables["TestDescriptionSetup"] != null)) {
                    base.Tables.Add(new TestDescriptionSetupDataTable(ds.Tables["TestDescriptionSetup"]));
                }
                if ((ds.Tables["TestParameters"] != null)) {
                    base.Tables.Add(new TestParametersDataTable(ds.Tables["TestParameters"]));
                }
                if ((ds.Tables["ShotTestInfo"] != null)) {
                    base.Tables.Add(new ShotTestInfoDataTable(ds.Tables["ShotTestInfo"]));
                }
                if ((ds.Tables["ToReportAllParameters"] != null)) {
                    base.Tables.Add(new ToReportAllParametersDataTable(ds.Tables["ToReportAllParameters"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestCommentsDataTable TestComments {
            get {
                return this.tableTestComments;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestDescriptionInputDataTable TestDescriptionInput {
            get {
                return this.tableTestDescriptionInput;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestDescriptionSetupDataTable TestDescriptionSetup {
            get {
                return this.tableTestDescriptionSetup;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TestParametersDataTable TestParameters {
            get {
                return this.tableTestParameters;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ShotTestInfoDataTable ShotTestInfo {
            get {
                return this.tableShotTestInfo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ToReportAllParametersDataTable ToReportAllParameters {
            get {
                return this.tableToReportAllParameters;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            DatabaseDataSet cln = ((DatabaseDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TestComments"] != null)) {
                    base.Tables.Add(new TestCommentsDataTable(ds.Tables["TestComments"]));
                }
                if ((ds.Tables["TestDescriptionInput"] != null)) {
                    base.Tables.Add(new TestDescriptionInputDataTable(ds.Tables["TestDescriptionInput"]));
                }
                if ((ds.Tables["TestDescriptionSetup"] != null)) {
                    base.Tables.Add(new TestDescriptionSetupDataTable(ds.Tables["TestDescriptionSetup"]));
                }
                if ((ds.Tables["TestParameters"] != null)) {
                    base.Tables.Add(new TestParametersDataTable(ds.Tables["TestParameters"]));
                }
                if ((ds.Tables["ShotTestInfo"] != null)) {
                    base.Tables.Add(new ShotTestInfoDataTable(ds.Tables["ShotTestInfo"]));
                }
                if ((ds.Tables["ToReportAllParameters"] != null)) {
                    base.Tables.Add(new ToReportAllParametersDataTable(ds.Tables["ToReportAllParameters"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableTestComments = ((TestCommentsDataTable)(base.Tables["TestComments"]));
            if ((initTable == true)) {
                if ((this.tableTestComments != null)) {
                    this.tableTestComments.InitVars();
                }
            }
            this.tableTestDescriptionInput = ((TestDescriptionInputDataTable)(base.Tables["TestDescriptionInput"]));
            if ((initTable == true)) {
                if ((this.tableTestDescriptionInput != null)) {
                    this.tableTestDescriptionInput.InitVars();
                }
            }
            this.tableTestDescriptionSetup = ((TestDescriptionSetupDataTable)(base.Tables["TestDescriptionSetup"]));
            if ((initTable == true)) {
                if ((this.tableTestDescriptionSetup != null)) {
                    this.tableTestDescriptionSetup.InitVars();
                }
            }
            this.tableTestParameters = ((TestParametersDataTable)(base.Tables["TestParameters"]));
            if ((initTable == true)) {
                if ((this.tableTestParameters != null)) {
                    this.tableTestParameters.InitVars();
                }
            }
            this.tableShotTestInfo = ((ShotTestInfoDataTable)(base.Tables["ShotTestInfo"]));
            if ((initTable == true)) {
                if ((this.tableShotTestInfo != null)) {
                    this.tableShotTestInfo.InitVars();
                }
            }
            this.tableToReportAllParameters = ((ToReportAllParametersDataTable)(base.Tables["ToReportAllParameters"]));
            if ((initTable == true)) {
                if ((this.tableToReportAllParameters != null)) {
                    this.tableToReportAllParameters.InitVars();
                }
            }
            this.relationFK_TestComments_TestDescriptionInput = this.Relations["FK_TestComments_TestDescriptionInput"];
            this.relationFK_TestDescriptionInput_TestDescriptionSetup1 = this.Relations["FK_TestDescriptionInput_TestDescriptionSetup1"];
            this.relationFK_TestParameters_TestDescriptionInput = this.Relations["FK_TestParameters_TestDescriptionInput"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "DatabaseDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DatabaseDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTestComments = new TestCommentsDataTable();
            base.Tables.Add(this.tableTestComments);
            this.tableTestDescriptionInput = new TestDescriptionInputDataTable();
            base.Tables.Add(this.tableTestDescriptionInput);
            this.tableTestDescriptionSetup = new TestDescriptionSetupDataTable();
            base.Tables.Add(this.tableTestDescriptionSetup);
            this.tableTestParameters = new TestParametersDataTable();
            base.Tables.Add(this.tableTestParameters);
            this.tableShotTestInfo = new ShotTestInfoDataTable();
            base.Tables.Add(this.tableShotTestInfo);
            this.tableToReportAllParameters = new ToReportAllParametersDataTable();
            base.Tables.Add(this.tableToReportAllParameters);
            this.relationFK_TestComments_TestDescriptionInput = new global::System.Data.DataRelation("FK_TestComments_TestDescriptionInput", new global::System.Data.DataColumn[] {
                        this.tableTestDescriptionInput.ID_TestInputColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestComments.ID_TestInputColumn}, false);
            this.Relations.Add(this.relationFK_TestComments_TestDescriptionInput);
            this.relationFK_TestDescriptionInput_TestDescriptionSetup1 = new global::System.Data.DataRelation("FK_TestDescriptionInput_TestDescriptionSetup1", new global::System.Data.DataColumn[] {
                        this.tableTestDescriptionSetup.ID_TestSetupColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestDescriptionInput.ID_TestDescSetupColumn}, false);
            this.Relations.Add(this.relationFK_TestDescriptionInput_TestDescriptionSetup1);
            this.relationFK_TestParameters_TestDescriptionInput = new global::System.Data.DataRelation("FK_TestParameters_TestDescriptionInput", new global::System.Data.DataColumn[] {
                        this.tableTestDescriptionInput.ID_TestInputColumn}, new global::System.Data.DataColumn[] {
                        this.tableTestParameters.TestInputIDColumn}, false);
            this.Relations.Add(this.relationFK_TestParameters_TestDescriptionInput);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeTestComments() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeTestDescriptionInput() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeTestDescriptionSetup() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeTestParameters() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeShotTestInfo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeToReportAllParameters() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DatabaseDataSet ds = new DatabaseDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TestCommentsRowChangeEventHandler(object sender, TestCommentsRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TestDescriptionInputRowChangeEventHandler(object sender, TestDescriptionInputRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TestDescriptionSetupRowChangeEventHandler(object sender, TestDescriptionSetupRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void TestParametersRowChangeEventHandler(object sender, TestParametersRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ShotTestInfoRowChangeEventHandler(object sender, ShotTestInfoRowChangeEvent e);
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void ToReportAllParametersRowChangeEventHandler(object sender, ToReportAllParametersRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestCommentsDataTable : global::System.Data.TypedTableBase<TestCommentsRow> {
            
            private global::System.Data.DataColumn columnID_Comments;
            
            private global::System.Data.DataColumn columnID_TestInput;
            
            private global::System.Data.DataColumn columnData;
            
            private global::System.Data.DataColumn columnComments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestCommentsDataTable() {
                this.TableName = "TestComments";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TestCommentsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TestCommentsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_CommentsColumn {
                get {
                    return this.columnID_Comments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_TestInputColumn {
                get {
                    return this.columnID_TestInput;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestCommentsRow this[int index] {
                get {
                    return ((TestCommentsRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TestCommentsRowChangeEventHandler TestCommentsRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TestCommentsRowChangeEventHandler TestCommentsRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TestCommentsRowChangeEventHandler TestCommentsRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TestCommentsRowChangeEventHandler TestCommentsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTestCommentsRow(TestCommentsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestCommentsRow AddTestCommentsRow(TestDescriptionInputRow parentTestDescriptionInputRowByFK_TestComments_TestDescriptionInput, System.DateTime Data, string Comments) {
                TestCommentsRow rowTestCommentsRow = ((TestCommentsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Data,
                        Comments};
                if ((parentTestDescriptionInputRowByFK_TestComments_TestDescriptionInput != null)) {
                    columnValuesArray[1] = parentTestDescriptionInputRowByFK_TestComments_TestDescriptionInput[0];
                }
                rowTestCommentsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestCommentsRow);
                return rowTestCommentsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestCommentsRow FindByID_Comments(int ID_Comments) {
                return ((TestCommentsRow)(this.Rows.Find(new object[] {
                            ID_Comments})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                TestCommentsDataTable cln = ((TestCommentsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestCommentsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnID_Comments = base.Columns["ID_Comments"];
                this.columnID_TestInput = base.Columns["ID_TestInput"];
                this.columnData = base.Columns["Data"];
                this.columnComments = base.Columns["Comments"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnID_Comments = new global::System.Data.DataColumn("ID_Comments", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_Comments);
                this.columnID_TestInput = new global::System.Data.DataColumn("ID_TestInput", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_TestInput);
                this.columnData = new global::System.Data.DataColumn("Data", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnData);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_Comments}, true));
                this.columnID_Comments.AutoIncrement = true;
                this.columnID_Comments.AutoIncrementSeed = 1;
                this.columnID_Comments.AllowDBNull = false;
                this.columnID_Comments.Unique = true;
                this.columnID_TestInput.AllowDBNull = false;
                this.columnID_TestInput.MaxLength = 20;
                this.columnData.AllowDBNull = false;
                this.columnComments.AllowDBNull = false;
                this.columnComments.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestCommentsRow NewTestCommentsRow() {
                return ((TestCommentsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestCommentsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(TestCommentsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestCommentsRowChanged != null)) {
                    this.TestCommentsRowChanged(this, new TestCommentsRowChangeEvent(((TestCommentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestCommentsRowChanging != null)) {
                    this.TestCommentsRowChanging(this, new TestCommentsRowChangeEvent(((TestCommentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestCommentsRowDeleted != null)) {
                    this.TestCommentsRowDeleted(this, new TestCommentsRowChangeEvent(((TestCommentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestCommentsRowDeleting != null)) {
                    this.TestCommentsRowDeleting(this, new TestCommentsRowChangeEvent(((TestCommentsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveTestCommentsRow(TestCommentsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DatabaseDataSet ds = new DatabaseDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestCommentsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestDescriptionInputDataTable : global::System.Data.TypedTableBase<TestDescriptionInputRow> {
            
            private global::System.Data.DataColumn columnID_TestInput;
            
            private global::System.Data.DataColumn columnTestNameInput;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnCompressorDescription;
            
            private global::System.Data.DataColumn columnRequester;
            
            private global::System.Data.DataColumn columnCompressorPass;
            
            private global::System.Data.DataColumn columnFinishDate;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnID_TestDescSetup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionInputDataTable() {
                this.TableName = "TestDescriptionInput";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TestDescriptionInputDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TestDescriptionInputDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_TestInputColumn {
                get {
                    return this.columnID_TestInput;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TestNameInputColumn {
                get {
                    return this.columnTestNameInput;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CompressorDescriptionColumn {
                get {
                    return this.columnCompressorDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RequesterColumn {
                get {
                    return this.columnRequester;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CompressorPassColumn {
                get {
                    return this.columnCompressorPass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FinishDateColumn {
                get {
                    return this.columnFinishDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_TestDescSetupColumn {
                get {
                    return this.columnID_TestDescSetup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionInputRow this[int index] {
                get {
                    return ((TestDescriptionInputRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TestDescriptionInputRowChangeEventHandler TestDescriptionInputRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TestDescriptionInputRowChangeEventHandler TestDescriptionInputRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TestDescriptionInputRowChangeEventHandler TestDescriptionInputRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TestDescriptionInputRowChangeEventHandler TestDescriptionInputRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTestDescriptionInputRow(TestDescriptionInputRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionInputRow AddTestDescriptionInputRow(string ID_TestInput, string TestNameInput, System.DateTime StartDate, string CompressorDescription, string Requester, bool CompressorPass, System.DateTime FinishDate, string Comments, TestDescriptionSetupRow parentTestDescriptionSetupRowByFK_TestDescriptionInput_TestDescriptionSetup1) {
                TestDescriptionInputRow rowTestDescriptionInputRow = ((TestDescriptionInputRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID_TestInput,
                        TestNameInput,
                        StartDate,
                        CompressorDescription,
                        Requester,
                        CompressorPass,
                        FinishDate,
                        Comments,
                        null};
                if ((parentTestDescriptionSetupRowByFK_TestDescriptionInput_TestDescriptionSetup1 != null)) {
                    columnValuesArray[8] = parentTestDescriptionSetupRowByFK_TestDescriptionInput_TestDescriptionSetup1[0];
                }
                rowTestDescriptionInputRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestDescriptionInputRow);
                return rowTestDescriptionInputRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionInputRow FindByID_TestInput(string ID_TestInput) {
                return ((TestDescriptionInputRow)(this.Rows.Find(new object[] {
                            ID_TestInput})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                TestDescriptionInputDataTable cln = ((TestDescriptionInputDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestDescriptionInputDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnID_TestInput = base.Columns["ID_TestInput"];
                this.columnTestNameInput = base.Columns["TestNameInput"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnCompressorDescription = base.Columns["CompressorDescription"];
                this.columnRequester = base.Columns["Requester"];
                this.columnCompressorPass = base.Columns["CompressorPass"];
                this.columnFinishDate = base.Columns["FinishDate"];
                this.columnComments = base.Columns["Comments"];
                this.columnID_TestDescSetup = base.Columns["ID_TestDescSetup"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnID_TestInput = new global::System.Data.DataColumn("ID_TestInput", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_TestInput);
                this.columnTestNameInput = new global::System.Data.DataColumn("TestNameInput", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestNameInput);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnCompressorDescription = new global::System.Data.DataColumn("CompressorDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompressorDescription);
                this.columnRequester = new global::System.Data.DataColumn("Requester", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequester);
                this.columnCompressorPass = new global::System.Data.DataColumn("CompressorPass", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompressorPass);
                this.columnFinishDate = new global::System.Data.DataColumn("FinishDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinishDate);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnID_TestDescSetup = new global::System.Data.DataColumn("ID_TestDescSetup", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_TestDescSetup);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_TestInput}, true));
                this.columnID_TestInput.AllowDBNull = false;
                this.columnID_TestInput.Unique = true;
                this.columnID_TestInput.MaxLength = 20;
                this.columnTestNameInput.MaxLength = 50;
                this.columnCompressorDescription.MaxLength = 2147483647;
                this.columnRequester.MaxLength = 2147483647;
                this.columnComments.MaxLength = 2147483647;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionInputRow NewTestDescriptionInputRow() {
                return ((TestDescriptionInputRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestDescriptionInputRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(TestDescriptionInputRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestDescriptionInputRowChanged != null)) {
                    this.TestDescriptionInputRowChanged(this, new TestDescriptionInputRowChangeEvent(((TestDescriptionInputRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestDescriptionInputRowChanging != null)) {
                    this.TestDescriptionInputRowChanging(this, new TestDescriptionInputRowChangeEvent(((TestDescriptionInputRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestDescriptionInputRowDeleted != null)) {
                    this.TestDescriptionInputRowDeleted(this, new TestDescriptionInputRowChangeEvent(((TestDescriptionInputRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestDescriptionInputRowDeleting != null)) {
                    this.TestDescriptionInputRowDeleting(this, new TestDescriptionInputRowChangeEvent(((TestDescriptionInputRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveTestDescriptionInputRow(TestDescriptionInputRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DatabaseDataSet ds = new DatabaseDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestDescriptionInputDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestDescriptionSetupDataTable : global::System.Data.TypedTableBase<TestDescriptionSetupRow> {
            
            private global::System.Data.DataColumn columnID_TestSetup;
            
            private global::System.Data.DataColumn columnTestName;
            
            private global::System.Data.DataColumn columnStep;
            
            private global::System.Data.DataColumn columnRequestedTime;
            
            private global::System.Data.DataColumn columnPressureDischargeSetup;
            
            private global::System.Data.DataColumn columnPressureSuctionSetup;
            
            private global::System.Data.DataColumn columnHotBoxTemperature;
            
            private global::System.Data.DataColumn columnCompressorLimitTemp;
            
            private global::System.Data.DataColumn columnRPMsetup;
            
            private global::System.Data.DataColumn columnECVOn;
            
            private global::System.Data.DataColumn columnECVOff;
            
            private global::System.Data.DataColumn columnECVHz;
            
            private global::System.Data.DataColumn columnECVDC;
            
            private global::System.Data.DataColumn columnCoilOn;
            
            private global::System.Data.DataColumn columnCoilOff;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionSetupDataTable() {
                this.TableName = "TestDescriptionSetup";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TestDescriptionSetupDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TestDescriptionSetupDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_TestSetupColumn {
                get {
                    return this.columnID_TestSetup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TestNameColumn {
                get {
                    return this.columnTestName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn StepColumn {
                get {
                    return this.columnStep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RequestedTimeColumn {
                get {
                    return this.columnRequestedTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PressureDischargeSetupColumn {
                get {
                    return this.columnPressureDischargeSetup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PressureSuctionSetupColumn {
                get {
                    return this.columnPressureSuctionSetup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HotBoxTemperatureColumn {
                get {
                    return this.columnHotBoxTemperature;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CompressorLimitTempColumn {
                get {
                    return this.columnCompressorLimitTemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RPMsetupColumn {
                get {
                    return this.columnRPMsetup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ECVOnColumn {
                get {
                    return this.columnECVOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ECVOffColumn {
                get {
                    return this.columnECVOff;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ECVHzColumn {
                get {
                    return this.columnECVHz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ECVDCColumn {
                get {
                    return this.columnECVDC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CoilOnColumn {
                get {
                    return this.columnCoilOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CoilOffColumn {
                get {
                    return this.columnCoilOff;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionSetupRow this[int index] {
                get {
                    return ((TestDescriptionSetupRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TestDescriptionSetupRowChangeEventHandler TestDescriptionSetupRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TestDescriptionSetupRowChangeEventHandler TestDescriptionSetupRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TestDescriptionSetupRowChangeEventHandler TestDescriptionSetupRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TestDescriptionSetupRowChangeEventHandler TestDescriptionSetupRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTestDescriptionSetupRow(TestDescriptionSetupRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionSetupRow AddTestDescriptionSetupRow(string TestName, int Step, int RequestedTime, double PressureDischargeSetup, double PressureSuctionSetup, double HotBoxTemperature, double CompressorLimitTemp, int RPMsetup, int ECVOn, int ECVOff, int ECVHz, int ECVDC, int CoilOn, int CoilOff) {
                TestDescriptionSetupRow rowTestDescriptionSetupRow = ((TestDescriptionSetupRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        TestName,
                        Step,
                        RequestedTime,
                        PressureDischargeSetup,
                        PressureSuctionSetup,
                        HotBoxTemperature,
                        CompressorLimitTemp,
                        RPMsetup,
                        ECVOn,
                        ECVOff,
                        ECVHz,
                        ECVDC,
                        CoilOn,
                        CoilOff};
                rowTestDescriptionSetupRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestDescriptionSetupRow);
                return rowTestDescriptionSetupRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionSetupRow FindByID_TestSetup(int ID_TestSetup) {
                return ((TestDescriptionSetupRow)(this.Rows.Find(new object[] {
                            ID_TestSetup})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                TestDescriptionSetupDataTable cln = ((TestDescriptionSetupDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestDescriptionSetupDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnID_TestSetup = base.Columns["ID_TestSetup"];
                this.columnTestName = base.Columns["TestName"];
                this.columnStep = base.Columns["Step"];
                this.columnRequestedTime = base.Columns["RequestedTime"];
                this.columnPressureDischargeSetup = base.Columns["PressureDischargeSetup"];
                this.columnPressureSuctionSetup = base.Columns["PressureSuctionSetup"];
                this.columnHotBoxTemperature = base.Columns["HotBoxTemperature"];
                this.columnCompressorLimitTemp = base.Columns["CompressorLimitTemp"];
                this.columnRPMsetup = base.Columns["RPMsetup"];
                this.columnECVOn = base.Columns["ECVOn"];
                this.columnECVOff = base.Columns["ECVOff"];
                this.columnECVHz = base.Columns["ECVHz"];
                this.columnECVDC = base.Columns["ECVDC"];
                this.columnCoilOn = base.Columns["CoilOn"];
                this.columnCoilOff = base.Columns["CoilOff"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnID_TestSetup = new global::System.Data.DataColumn("ID_TestSetup", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_TestSetup);
                this.columnTestName = new global::System.Data.DataColumn("TestName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestName);
                this.columnStep = new global::System.Data.DataColumn("Step", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStep);
                this.columnRequestedTime = new global::System.Data.DataColumn("RequestedTime", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestedTime);
                this.columnPressureDischargeSetup = new global::System.Data.DataColumn("PressureDischargeSetup", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPressureDischargeSetup);
                this.columnPressureSuctionSetup = new global::System.Data.DataColumn("PressureSuctionSetup", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPressureSuctionSetup);
                this.columnHotBoxTemperature = new global::System.Data.DataColumn("HotBoxTemperature", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHotBoxTemperature);
                this.columnCompressorLimitTemp = new global::System.Data.DataColumn("CompressorLimitTemp", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompressorLimitTemp);
                this.columnRPMsetup = new global::System.Data.DataColumn("RPMsetup", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRPMsetup);
                this.columnECVOn = new global::System.Data.DataColumn("ECVOn", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECVOn);
                this.columnECVOff = new global::System.Data.DataColumn("ECVOff", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECVOff);
                this.columnECVHz = new global::System.Data.DataColumn("ECVHz", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECVHz);
                this.columnECVDC = new global::System.Data.DataColumn("ECVDC", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECVDC);
                this.columnCoilOn = new global::System.Data.DataColumn("CoilOn", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoilOn);
                this.columnCoilOff = new global::System.Data.DataColumn("CoilOff", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoilOff);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_TestSetup}, true));
                this.columnID_TestSetup.AutoIncrement = true;
                this.columnID_TestSetup.AutoIncrementSeed = 1;
                this.columnID_TestSetup.AllowDBNull = false;
                this.columnID_TestSetup.Unique = true;
                this.columnTestName.AllowDBNull = false;
                this.columnTestName.MaxLength = 50;
                this.columnStep.AllowDBNull = false;
                this.columnRequestedTime.AllowDBNull = false;
                this.columnPressureDischargeSetup.AllowDBNull = false;
                this.columnPressureSuctionSetup.AllowDBNull = false;
                this.columnHotBoxTemperature.AllowDBNull = false;
                this.columnCompressorLimitTemp.AllowDBNull = false;
                this.columnRPMsetup.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionSetupRow NewTestDescriptionSetupRow() {
                return ((TestDescriptionSetupRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestDescriptionSetupRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(TestDescriptionSetupRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestDescriptionSetupRowChanged != null)) {
                    this.TestDescriptionSetupRowChanged(this, new TestDescriptionSetupRowChangeEvent(((TestDescriptionSetupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestDescriptionSetupRowChanging != null)) {
                    this.TestDescriptionSetupRowChanging(this, new TestDescriptionSetupRowChangeEvent(((TestDescriptionSetupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestDescriptionSetupRowDeleted != null)) {
                    this.TestDescriptionSetupRowDeleted(this, new TestDescriptionSetupRowChangeEvent(((TestDescriptionSetupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestDescriptionSetupRowDeleting != null)) {
                    this.TestDescriptionSetupRowDeleting(this, new TestDescriptionSetupRowChangeEvent(((TestDescriptionSetupRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveTestDescriptionSetupRow(TestDescriptionSetupRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DatabaseDataSet ds = new DatabaseDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestDescriptionSetupDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TestParametersDataTable : global::System.Data.TypedTableBase<TestParametersRow> {
            
            private global::System.Data.DataColumn columnID_TestSetupParameters;
            
            private global::System.Data.DataColumn columnTestInputID;
            
            private global::System.Data.DataColumn columnData;
            
            private global::System.Data.DataColumn columnTime;
            
            private global::System.Data.DataColumn columnPdischarge;
            
            private global::System.Data.DataColumn columnPsuction;
            
            private global::System.Data.DataColumn columnTdischarge;
            
            private global::System.Data.DataColumn columnTsuction;
            
            private global::System.Data.DataColumn columnTcondenserIn;
            
            private global::System.Data.DataColumn columnTcondenserOut;
            
            private global::System.Data.DataColumn columnTEvapuratorIn;
            
            private global::System.Data.DataColumn columnTEvapuratorOut;
            
            private global::System.Data.DataColumn columnTAirIn;
            
            private global::System.Data.DataColumn columnTAirOut;
            
            private global::System.Data.DataColumn columnHAirIn;
            
            private global::System.Data.DataColumn columnHAirOut;
            
            private global::System.Data.DataColumn columnTCompressor;
            
            private global::System.Data.DataColumn columnTHotbox;
            
            private global::System.Data.DataColumn columnRPM;
            
            private global::System.Data.DataColumn columnCoilVoltage;
            
            private global::System.Data.DataColumn columnCoilCurrent;
            
            private global::System.Data.DataColumn columnECVVoltage;
            
            private global::System.Data.DataColumn columnECVCurrent;
            
            private global::System.Data.DataColumn columnClutchTotalCycles;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestParametersDataTable() {
                this.TableName = "TestParameters";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TestParametersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected TestParametersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_TestSetupParametersColumn {
                get {
                    return this.columnID_TestSetupParameters;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TestInputIDColumn {
                get {
                    return this.columnTestInputID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TimeColumn {
                get {
                    return this.columnTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PdischargeColumn {
                get {
                    return this.columnPdischarge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PsuctionColumn {
                get {
                    return this.columnPsuction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TdischargeColumn {
                get {
                    return this.columnTdischarge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TsuctionColumn {
                get {
                    return this.columnTsuction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TcondenserInColumn {
                get {
                    return this.columnTcondenserIn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TcondenserOutColumn {
                get {
                    return this.columnTcondenserOut;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TEvapuratorInColumn {
                get {
                    return this.columnTEvapuratorIn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TEvapuratorOutColumn {
                get {
                    return this.columnTEvapuratorOut;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TAirInColumn {
                get {
                    return this.columnTAirIn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TAirOutColumn {
                get {
                    return this.columnTAirOut;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HAirInColumn {
                get {
                    return this.columnHAirIn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HAirOutColumn {
                get {
                    return this.columnHAirOut;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TCompressorColumn {
                get {
                    return this.columnTCompressor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn THotboxColumn {
                get {
                    return this.columnTHotbox;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RPMColumn {
                get {
                    return this.columnRPM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CoilVoltageColumn {
                get {
                    return this.columnCoilVoltage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CoilCurrentColumn {
                get {
                    return this.columnCoilCurrent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ECVVoltageColumn {
                get {
                    return this.columnECVVoltage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ECVCurrentColumn {
                get {
                    return this.columnECVCurrent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ClutchTotalCyclesColumn {
                get {
                    return this.columnClutchTotalCycles;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestParametersRow this[int index] {
                get {
                    return ((TestParametersRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TestParametersRowChangeEventHandler TestParametersRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TestParametersRowChangeEventHandler TestParametersRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TestParametersRowChangeEventHandler TestParametersRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event TestParametersRowChangeEventHandler TestParametersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddTestParametersRow(TestParametersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestParametersRow AddTestParametersRow(
                        TestDescriptionInputRow parentTestDescriptionInputRowByFK_TestParameters_TestDescriptionInput, 
                        System.DateTime Data, 
                        System.TimeSpan Time, 
                        double Pdischarge, 
                        double Psuction, 
                        double Tdischarge, 
                        double Tsuction, 
                        double TcondenserIn, 
                        double TcondenserOut, 
                        double TEvapuratorIn, 
                        double TEvapuratorOut, 
                        double TAirIn, 
                        double TAirOut, 
                        double HAirIn, 
                        double HAirOut, 
                        double TCompressor, 
                        double THotbox, 
                        double RPM, 
                        double CoilVoltage, 
                        double CoilCurrent, 
                        double ECVVoltage, 
                        double ECVCurrent, 
                        int ClutchTotalCycles) {
                TestParametersRow rowTestParametersRow = ((TestParametersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        null,
                        Data,
                        Time,
                        Pdischarge,
                        Psuction,
                        Tdischarge,
                        Tsuction,
                        TcondenserIn,
                        TcondenserOut,
                        TEvapuratorIn,
                        TEvapuratorOut,
                        TAirIn,
                        TAirOut,
                        HAirIn,
                        HAirOut,
                        TCompressor,
                        THotbox,
                        RPM,
                        CoilVoltage,
                        CoilCurrent,
                        ECVVoltage,
                        ECVCurrent,
                        ClutchTotalCycles};
                if ((parentTestDescriptionInputRowByFK_TestParameters_TestDescriptionInput != null)) {
                    columnValuesArray[1] = parentTestDescriptionInputRowByFK_TestParameters_TestDescriptionInput[0];
                }
                rowTestParametersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTestParametersRow);
                return rowTestParametersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestParametersRow FindByID_TestSetupParameters(decimal ID_TestSetupParameters) {
                return ((TestParametersRow)(this.Rows.Find(new object[] {
                            ID_TestSetupParameters})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                TestParametersDataTable cln = ((TestParametersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TestParametersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnID_TestSetupParameters = base.Columns["ID_TestSetupParameters"];
                this.columnTestInputID = base.Columns["TestInputID"];
                this.columnData = base.Columns["Data"];
                this.columnTime = base.Columns["Time"];
                this.columnPdischarge = base.Columns["Pdischarge"];
                this.columnPsuction = base.Columns["Psuction"];
                this.columnTdischarge = base.Columns["Tdischarge"];
                this.columnTsuction = base.Columns["Tsuction"];
                this.columnTcondenserIn = base.Columns["TcondenserIn"];
                this.columnTcondenserOut = base.Columns["TcondenserOut"];
                this.columnTEvapuratorIn = base.Columns["TEvapuratorIn"];
                this.columnTEvapuratorOut = base.Columns["TEvapuratorOut"];
                this.columnTAirIn = base.Columns["TAirIn"];
                this.columnTAirOut = base.Columns["TAirOut"];
                this.columnHAirIn = base.Columns["HAirIn"];
                this.columnHAirOut = base.Columns["HAirOut"];
                this.columnTCompressor = base.Columns["TCompressor"];
                this.columnTHotbox = base.Columns["THotbox"];
                this.columnRPM = base.Columns["RPM"];
                this.columnCoilVoltage = base.Columns["CoilVoltage"];
                this.columnCoilCurrent = base.Columns["CoilCurrent"];
                this.columnECVVoltage = base.Columns["ECVVoltage"];
                this.columnECVCurrent = base.Columns["ECVCurrent"];
                this.columnClutchTotalCycles = base.Columns["ClutchTotalCycles"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnID_TestSetupParameters = new global::System.Data.DataColumn("ID_TestSetupParameters", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_TestSetupParameters);
                this.columnTestInputID = new global::System.Data.DataColumn("TestInputID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestInputID);
                this.columnData = new global::System.Data.DataColumn("Data", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnData);
                this.columnTime = new global::System.Data.DataColumn("Time", typeof(global::System.TimeSpan), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTime);
                this.columnPdischarge = new global::System.Data.DataColumn("Pdischarge", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPdischarge);
                this.columnPsuction = new global::System.Data.DataColumn("Psuction", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPsuction);
                this.columnTdischarge = new global::System.Data.DataColumn("Tdischarge", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTdischarge);
                this.columnTsuction = new global::System.Data.DataColumn("Tsuction", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTsuction);
                this.columnTcondenserIn = new global::System.Data.DataColumn("TcondenserIn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTcondenserIn);
                this.columnTcondenserOut = new global::System.Data.DataColumn("TcondenserOut", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTcondenserOut);
                this.columnTEvapuratorIn = new global::System.Data.DataColumn("TEvapuratorIn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEvapuratorIn);
                this.columnTEvapuratorOut = new global::System.Data.DataColumn("TEvapuratorOut", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEvapuratorOut);
                this.columnTAirIn = new global::System.Data.DataColumn("TAirIn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTAirIn);
                this.columnTAirOut = new global::System.Data.DataColumn("TAirOut", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTAirOut);
                this.columnHAirIn = new global::System.Data.DataColumn("HAirIn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHAirIn);
                this.columnHAirOut = new global::System.Data.DataColumn("HAirOut", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHAirOut);
                this.columnTCompressor = new global::System.Data.DataColumn("TCompressor", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTCompressor);
                this.columnTHotbox = new global::System.Data.DataColumn("THotbox", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTHotbox);
                this.columnRPM = new global::System.Data.DataColumn("RPM", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRPM);
                this.columnCoilVoltage = new global::System.Data.DataColumn("CoilVoltage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoilVoltage);
                this.columnCoilCurrent = new global::System.Data.DataColumn("CoilCurrent", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoilCurrent);
                this.columnECVVoltage = new global::System.Data.DataColumn("ECVVoltage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECVVoltage);
                this.columnECVCurrent = new global::System.Data.DataColumn("ECVCurrent", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECVCurrent);
                this.columnClutchTotalCycles = new global::System.Data.DataColumn("ClutchTotalCycles", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClutchTotalCycles);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_TestSetupParameters}, true));
                this.columnID_TestSetupParameters.AutoIncrement = true;
                this.columnID_TestSetupParameters.AutoIncrementSeed = 1;
                this.columnID_TestSetupParameters.AllowDBNull = false;
                this.columnID_TestSetupParameters.Unique = true;
                this.columnTestInputID.MaxLength = 20;
                this.columnData.AllowDBNull = false;
                this.columnTime.AllowDBNull = false;
                this.columnPdischarge.AllowDBNull = false;
                this.columnPsuction.AllowDBNull = false;
                this.columnTdischarge.AllowDBNull = false;
                this.columnTsuction.AllowDBNull = false;
                this.columnTcondenserIn.AllowDBNull = false;
                this.columnTcondenserOut.AllowDBNull = false;
                this.columnTEvapuratorIn.AllowDBNull = false;
                this.columnTEvapuratorOut.AllowDBNull = false;
                this.columnTAirIn.AllowDBNull = false;
                this.columnTAirOut.AllowDBNull = false;
                this.columnHAirIn.AllowDBNull = false;
                this.columnHAirOut.AllowDBNull = false;
                this.columnTCompressor.AllowDBNull = false;
                this.columnTHotbox.AllowDBNull = false;
                this.columnRPM.AllowDBNull = false;
                this.columnCoilVoltage.AllowDBNull = false;
                this.columnCoilCurrent.AllowDBNull = false;
                this.columnECVVoltage.AllowDBNull = false;
                this.columnECVCurrent.AllowDBNull = false;
                this.columnClutchTotalCycles.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestParametersRow NewTestParametersRow() {
                return ((TestParametersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TestParametersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(TestParametersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TestParametersRowChanged != null)) {
                    this.TestParametersRowChanged(this, new TestParametersRowChangeEvent(((TestParametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TestParametersRowChanging != null)) {
                    this.TestParametersRowChanging(this, new TestParametersRowChangeEvent(((TestParametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TestParametersRowDeleted != null)) {
                    this.TestParametersRowDeleted(this, new TestParametersRowChangeEvent(((TestParametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TestParametersRowDeleting != null)) {
                    this.TestParametersRowDeleting(this, new TestParametersRowChangeEvent(((TestParametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveTestParametersRow(TestParametersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DatabaseDataSet ds = new DatabaseDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TestParametersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ShotTestInfoDataTable : global::System.Data.TypedTableBase<ShotTestInfoRow> {
            
            private global::System.Data.DataColumn columnTestNameInput;
            
            private global::System.Data.DataColumn columnCompressorDescription;
            
            private global::System.Data.DataColumn columnRequester;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnData;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnTestName;
            
            private global::System.Data.DataColumn columnStep;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShotTestInfoDataTable() {
                this.TableName = "ShotTestInfo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ShotTestInfoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ShotTestInfoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TestNameInputColumn {
                get {
                    return this.columnTestNameInput;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CompressorDescriptionColumn {
                get {
                    return this.columnCompressorDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RequesterColumn {
                get {
                    return this.columnRequester;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DataColumn {
                get {
                    return this.columnData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TestNameColumn {
                get {
                    return this.columnTestName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn StepColumn {
                get {
                    return this.columnStep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShotTestInfoRow this[int index] {
                get {
                    return ((ShotTestInfoRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShotTestInfoRowChangeEventHandler ShotTestInfoRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShotTestInfoRowChangeEventHandler ShotTestInfoRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShotTestInfoRowChangeEventHandler ShotTestInfoRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ShotTestInfoRowChangeEventHandler ShotTestInfoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddShotTestInfoRow(ShotTestInfoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShotTestInfoRow AddShotTestInfoRow(string TestNameInput, string CompressorDescription, string Requester, System.DateTime StartDate, System.DateTime Data, string Comments, string TestName, int Step) {
                ShotTestInfoRow rowShotTestInfoRow = ((ShotTestInfoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TestNameInput,
                        CompressorDescription,
                        Requester,
                        StartDate,
                        Data,
                        Comments,
                        TestName,
                        Step};
                rowShotTestInfoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowShotTestInfoRow);
                return rowShotTestInfoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ShotTestInfoDataTable cln = ((ShotTestInfoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ShotTestInfoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnTestNameInput = base.Columns["TestNameInput"];
                this.columnCompressorDescription = base.Columns["CompressorDescription"];
                this.columnRequester = base.Columns["Requester"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnData = base.Columns["Data"];
                this.columnComments = base.Columns["Comments"];
                this.columnTestName = base.Columns["TestName"];
                this.columnStep = base.Columns["Step"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnTestNameInput = new global::System.Data.DataColumn("TestNameInput", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestNameInput);
                this.columnCompressorDescription = new global::System.Data.DataColumn("CompressorDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompressorDescription);
                this.columnRequester = new global::System.Data.DataColumn("Requester", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequester);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnData = new global::System.Data.DataColumn("Data", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnData);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnTestName = new global::System.Data.DataColumn("TestName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestName);
                this.columnStep = new global::System.Data.DataColumn("Step", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStep);
                this.columnTestNameInput.MaxLength = 50;
                this.columnCompressorDescription.MaxLength = 2147483647;
                this.columnRequester.MaxLength = 2147483647;
                this.columnData.AllowDBNull = false;
                this.columnComments.AllowDBNull = false;
                this.columnComments.MaxLength = 2147483647;
                this.columnTestName.AllowDBNull = false;
                this.columnTestName.MaxLength = 50;
                this.columnStep.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShotTestInfoRow NewShotTestInfoRow() {
                return ((ShotTestInfoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ShotTestInfoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ShotTestInfoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ShotTestInfoRowChanged != null)) {
                    this.ShotTestInfoRowChanged(this, new ShotTestInfoRowChangeEvent(((ShotTestInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ShotTestInfoRowChanging != null)) {
                    this.ShotTestInfoRowChanging(this, new ShotTestInfoRowChangeEvent(((ShotTestInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ShotTestInfoRowDeleted != null)) {
                    this.ShotTestInfoRowDeleted(this, new ShotTestInfoRowChangeEvent(((ShotTestInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ShotTestInfoRowDeleting != null)) {
                    this.ShotTestInfoRowDeleting(this, new ShotTestInfoRowChangeEvent(((ShotTestInfoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveShotTestInfoRow(ShotTestInfoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DatabaseDataSet ds = new DatabaseDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ShotTestInfoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ToReportAllParametersDataTable : global::System.Data.TypedTableBase<ToReportAllParametersRow> {
            
            private global::System.Data.DataColumn columnID_TestInput;
            
            private global::System.Data.DataColumn columnTestNameInput;
            
            private global::System.Data.DataColumn columnStartDate;
            
            private global::System.Data.DataColumn columnCompressorDescription;
            
            private global::System.Data.DataColumn columnRequester;
            
            private global::System.Data.DataColumn columnCompressorPass;
            
            private global::System.Data.DataColumn columnFinishDate;
            
            private global::System.Data.DataColumn columnComments;
            
            private global::System.Data.DataColumn columnID_TestDescSetup;
            
            private global::System.Data.DataColumn columnID_TestSetup;
            
            private global::System.Data.DataColumn columnTestName;
            
            private global::System.Data.DataColumn columnStep;
            
            private global::System.Data.DataColumn columnRequestedTime;
            
            private global::System.Data.DataColumn columnPressureDischargeSetup;
            
            private global::System.Data.DataColumn columnPressureSuctionSetup;
            
            private global::System.Data.DataColumn columnHotBoxTemperature;
            
            private global::System.Data.DataColumn columnCompressorLimitTemp;
            
            private global::System.Data.DataColumn columnRPMsetup;
            
            private global::System.Data.DataColumn columnECVOn;
            
            private global::System.Data.DataColumn columnECVOff;
            
            private global::System.Data.DataColumn columnECVHz;
            
            private global::System.Data.DataColumn columnECVDC;
            
            private global::System.Data.DataColumn columnCoilOn;
            
            private global::System.Data.DataColumn columnCoilOff;
            
            private global::System.Data.DataColumn columnExpr2;
            
            private global::System.Data.DataColumn columnExpr3;
            
            private global::System.Data.DataColumn columnExpr4;
            
            private global::System.Data.DataColumn columnExpr5;
            
            private global::System.Data.DataColumn columnExpr6;
            
            private global::System.Data.DataColumn columnPdischarge;
            
            private global::System.Data.DataColumn columnPsuction;
            
            private global::System.Data.DataColumn columnTdischarge;
            
            private global::System.Data.DataColumn columnTsuction;
            
            private global::System.Data.DataColumn columnTcondenserIn;
            
            private global::System.Data.DataColumn columnTcondenserOut;
            
            private global::System.Data.DataColumn columnTEvapuratorIn;
            
            private global::System.Data.DataColumn columnTEvapuratorOut;
            
            private global::System.Data.DataColumn columnTAirIn;
            
            private global::System.Data.DataColumn columnTAirOut;
            
            private global::System.Data.DataColumn columnHAirIn;
            
            private global::System.Data.DataColumn columnHAirOut;
            
            private global::System.Data.DataColumn columnTCompressor;
            
            private global::System.Data.DataColumn columnTHotbox;
            
            private global::System.Data.DataColumn columnRPM;
            
            private global::System.Data.DataColumn columnCoilVoltage;
            
            private global::System.Data.DataColumn columnCoilCurrent;
            
            private global::System.Data.DataColumn columnECVVoltage;
            
            private global::System.Data.DataColumn columnClutchTotalCycles;
            
            private global::System.Data.DataColumn columnECVCurrent;
            
            private global::System.Data.DataColumn columnID_Comments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ToReportAllParametersDataTable() {
                this.TableName = "ToReportAllParameters";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ToReportAllParametersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected ToReportAllParametersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_TestInputColumn {
                get {
                    return this.columnID_TestInput;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TestNameInputColumn {
                get {
                    return this.columnTestNameInput;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn StartDateColumn {
                get {
                    return this.columnStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CompressorDescriptionColumn {
                get {
                    return this.columnCompressorDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RequesterColumn {
                get {
                    return this.columnRequester;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CompressorPassColumn {
                get {
                    return this.columnCompressorPass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn FinishDateColumn {
                get {
                    return this.columnFinishDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CommentsColumn {
                get {
                    return this.columnComments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_TestDescSetupColumn {
                get {
                    return this.columnID_TestDescSetup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_TestSetupColumn {
                get {
                    return this.columnID_TestSetup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TestNameColumn {
                get {
                    return this.columnTestName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn StepColumn {
                get {
                    return this.columnStep;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RequestedTimeColumn {
                get {
                    return this.columnRequestedTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PressureDischargeSetupColumn {
                get {
                    return this.columnPressureDischargeSetup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PressureSuctionSetupColumn {
                get {
                    return this.columnPressureSuctionSetup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HotBoxTemperatureColumn {
                get {
                    return this.columnHotBoxTemperature;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CompressorLimitTempColumn {
                get {
                    return this.columnCompressorLimitTemp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RPMsetupColumn {
                get {
                    return this.columnRPMsetup;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ECVOnColumn {
                get {
                    return this.columnECVOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ECVOffColumn {
                get {
                    return this.columnECVOff;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ECVHzColumn {
                get {
                    return this.columnECVHz;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ECVDCColumn {
                get {
                    return this.columnECVDC;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CoilOnColumn {
                get {
                    return this.columnCoilOn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CoilOffColumn {
                get {
                    return this.columnCoilOff;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Expr2Column {
                get {
                    return this.columnExpr2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Expr3Column {
                get {
                    return this.columnExpr3;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Expr4Column {
                get {
                    return this.columnExpr4;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Expr5Column {
                get {
                    return this.columnExpr5;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn Expr6Column {
                get {
                    return this.columnExpr6;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PdischargeColumn {
                get {
                    return this.columnPdischarge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn PsuctionColumn {
                get {
                    return this.columnPsuction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TdischargeColumn {
                get {
                    return this.columnTdischarge;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TsuctionColumn {
                get {
                    return this.columnTsuction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TcondenserInColumn {
                get {
                    return this.columnTcondenserIn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TcondenserOutColumn {
                get {
                    return this.columnTcondenserOut;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TEvapuratorInColumn {
                get {
                    return this.columnTEvapuratorIn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TEvapuratorOutColumn {
                get {
                    return this.columnTEvapuratorOut;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TAirInColumn {
                get {
                    return this.columnTAirIn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TAirOutColumn {
                get {
                    return this.columnTAirOut;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HAirInColumn {
                get {
                    return this.columnHAirIn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HAirOutColumn {
                get {
                    return this.columnHAirOut;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn TCompressorColumn {
                get {
                    return this.columnTCompressor;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn THotboxColumn {
                get {
                    return this.columnTHotbox;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn RPMColumn {
                get {
                    return this.columnRPM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CoilVoltageColumn {
                get {
                    return this.columnCoilVoltage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn CoilCurrentColumn {
                get {
                    return this.columnCoilCurrent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ECVVoltageColumn {
                get {
                    return this.columnECVVoltage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ClutchTotalCyclesColumn {
                get {
                    return this.columnClutchTotalCycles;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ECVCurrentColumn {
                get {
                    return this.columnECVCurrent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ID_CommentsColumn {
                get {
                    return this.columnID_Comments;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ToReportAllParametersRow this[int index] {
                get {
                    return ((ToReportAllParametersRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ToReportAllParametersRowChangeEventHandler ToReportAllParametersRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ToReportAllParametersRowChangeEventHandler ToReportAllParametersRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ToReportAllParametersRowChangeEventHandler ToReportAllParametersRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event ToReportAllParametersRowChangeEventHandler ToReportAllParametersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddToReportAllParametersRow(ToReportAllParametersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ToReportAllParametersRow AddToReportAllParametersRow(
                        string ID_TestInput, 
                        string TestNameInput, 
                        System.DateTime StartDate, 
                        string CompressorDescription, 
                        string Requester, 
                        bool CompressorPass, 
                        System.DateTime FinishDate, 
                        string Comments, 
                        int ID_TestDescSetup, 
                        int ID_TestSetup, 
                        string TestName, 
                        int Step, 
                        int RequestedTime, 
                        double PressureDischargeSetup, 
                        double PressureSuctionSetup, 
                        double HotBoxTemperature, 
                        double CompressorLimitTemp, 
                        int RPMsetup, 
                        int ECVOn, 
                        int ECVOff, 
                        int ECVHz, 
                        int ECVDC, 
                        int CoilOn, 
                        int CoilOff, 
                        System.DateTime Expr2, 
                        string Expr3, 
                        decimal Expr4, 
                        System.TimeSpan Expr5, 
                        System.DateTime Expr6, 
                        double Pdischarge, 
                        double Psuction, 
                        double Tdischarge, 
                        double Tsuction, 
                        double TcondenserIn, 
                        double TcondenserOut, 
                        double TEvapuratorIn, 
                        double TEvapuratorOut, 
                        double TAirIn, 
                        double TAirOut, 
                        double HAirIn, 
                        double HAirOut, 
                        double TCompressor, 
                        double THotbox, 
                        double RPM, 
                        double CoilVoltage, 
                        double CoilCurrent, 
                        double ECVVoltage, 
                        int ClutchTotalCycles, 
                        double ECVCurrent, 
                        int ID_Comments) {
                ToReportAllParametersRow rowToReportAllParametersRow = ((ToReportAllParametersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID_TestInput,
                        TestNameInput,
                        StartDate,
                        CompressorDescription,
                        Requester,
                        CompressorPass,
                        FinishDate,
                        Comments,
                        ID_TestDescSetup,
                        ID_TestSetup,
                        TestName,
                        Step,
                        RequestedTime,
                        PressureDischargeSetup,
                        PressureSuctionSetup,
                        HotBoxTemperature,
                        CompressorLimitTemp,
                        RPMsetup,
                        ECVOn,
                        ECVOff,
                        ECVHz,
                        ECVDC,
                        CoilOn,
                        CoilOff,
                        Expr2,
                        Expr3,
                        Expr4,
                        Expr5,
                        Expr6,
                        Pdischarge,
                        Psuction,
                        Tdischarge,
                        Tsuction,
                        TcondenserIn,
                        TcondenserOut,
                        TEvapuratorIn,
                        TEvapuratorOut,
                        TAirIn,
                        TAirOut,
                        HAirIn,
                        HAirOut,
                        TCompressor,
                        THotbox,
                        RPM,
                        CoilVoltage,
                        CoilCurrent,
                        ECVVoltage,
                        ClutchTotalCycles,
                        ECVCurrent,
                        ID_Comments};
                rowToReportAllParametersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowToReportAllParametersRow);
                return rowToReportAllParametersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ToReportAllParametersRow FindByID_TestInputID_TestSetupExpr4ID_Comments(string ID_TestInput, int ID_TestSetup, decimal Expr4, int ID_Comments) {
                return ((ToReportAllParametersRow)(this.Rows.Find(new object[] {
                            ID_TestInput,
                            ID_TestSetup,
                            Expr4,
                            ID_Comments})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                ToReportAllParametersDataTable cln = ((ToReportAllParametersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ToReportAllParametersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnID_TestInput = base.Columns["ID_TestInput"];
                this.columnTestNameInput = base.Columns["TestNameInput"];
                this.columnStartDate = base.Columns["StartDate"];
                this.columnCompressorDescription = base.Columns["CompressorDescription"];
                this.columnRequester = base.Columns["Requester"];
                this.columnCompressorPass = base.Columns["CompressorPass"];
                this.columnFinishDate = base.Columns["FinishDate"];
                this.columnComments = base.Columns["Comments"];
                this.columnID_TestDescSetup = base.Columns["ID_TestDescSetup"];
                this.columnID_TestSetup = base.Columns["ID_TestSetup"];
                this.columnTestName = base.Columns["TestName"];
                this.columnStep = base.Columns["Step"];
                this.columnRequestedTime = base.Columns["RequestedTime"];
                this.columnPressureDischargeSetup = base.Columns["PressureDischargeSetup"];
                this.columnPressureSuctionSetup = base.Columns["PressureSuctionSetup"];
                this.columnHotBoxTemperature = base.Columns["HotBoxTemperature"];
                this.columnCompressorLimitTemp = base.Columns["CompressorLimitTemp"];
                this.columnRPMsetup = base.Columns["RPMsetup"];
                this.columnECVOn = base.Columns["ECVOn"];
                this.columnECVOff = base.Columns["ECVOff"];
                this.columnECVHz = base.Columns["ECVHz"];
                this.columnECVDC = base.Columns["ECVDC"];
                this.columnCoilOn = base.Columns["CoilOn"];
                this.columnCoilOff = base.Columns["CoilOff"];
                this.columnExpr2 = base.Columns["Expr2"];
                this.columnExpr3 = base.Columns["Expr3"];
                this.columnExpr4 = base.Columns["Expr4"];
                this.columnExpr5 = base.Columns["Expr5"];
                this.columnExpr6 = base.Columns["Expr6"];
                this.columnPdischarge = base.Columns["Pdischarge"];
                this.columnPsuction = base.Columns["Psuction"];
                this.columnTdischarge = base.Columns["Tdischarge"];
                this.columnTsuction = base.Columns["Tsuction"];
                this.columnTcondenserIn = base.Columns["TcondenserIn"];
                this.columnTcondenserOut = base.Columns["TcondenserOut"];
                this.columnTEvapuratorIn = base.Columns["TEvapuratorIn"];
                this.columnTEvapuratorOut = base.Columns["TEvapuratorOut"];
                this.columnTAirIn = base.Columns["TAirIn"];
                this.columnTAirOut = base.Columns["TAirOut"];
                this.columnHAirIn = base.Columns["HAirIn"];
                this.columnHAirOut = base.Columns["HAirOut"];
                this.columnTCompressor = base.Columns["TCompressor"];
                this.columnTHotbox = base.Columns["THotbox"];
                this.columnRPM = base.Columns["RPM"];
                this.columnCoilVoltage = base.Columns["CoilVoltage"];
                this.columnCoilCurrent = base.Columns["CoilCurrent"];
                this.columnECVVoltage = base.Columns["ECVVoltage"];
                this.columnClutchTotalCycles = base.Columns["ClutchTotalCycles"];
                this.columnECVCurrent = base.Columns["ECVCurrent"];
                this.columnID_Comments = base.Columns["ID_Comments"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnID_TestInput = new global::System.Data.DataColumn("ID_TestInput", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_TestInput);
                this.columnTestNameInput = new global::System.Data.DataColumn("TestNameInput", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestNameInput);
                this.columnStartDate = new global::System.Data.DataColumn("StartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartDate);
                this.columnCompressorDescription = new global::System.Data.DataColumn("CompressorDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompressorDescription);
                this.columnRequester = new global::System.Data.DataColumn("Requester", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequester);
                this.columnCompressorPass = new global::System.Data.DataColumn("CompressorPass", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompressorPass);
                this.columnFinishDate = new global::System.Data.DataColumn("FinishDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinishDate);
                this.columnComments = new global::System.Data.DataColumn("Comments", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComments);
                this.columnID_TestDescSetup = new global::System.Data.DataColumn("ID_TestDescSetup", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_TestDescSetup);
                this.columnID_TestSetup = new global::System.Data.DataColumn("ID_TestSetup", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_TestSetup);
                this.columnTestName = new global::System.Data.DataColumn("TestName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTestName);
                this.columnStep = new global::System.Data.DataColumn("Step", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStep);
                this.columnRequestedTime = new global::System.Data.DataColumn("RequestedTime", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestedTime);
                this.columnPressureDischargeSetup = new global::System.Data.DataColumn("PressureDischargeSetup", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPressureDischargeSetup);
                this.columnPressureSuctionSetup = new global::System.Data.DataColumn("PressureSuctionSetup", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPressureSuctionSetup);
                this.columnHotBoxTemperature = new global::System.Data.DataColumn("HotBoxTemperature", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHotBoxTemperature);
                this.columnCompressorLimitTemp = new global::System.Data.DataColumn("CompressorLimitTemp", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompressorLimitTemp);
                this.columnRPMsetup = new global::System.Data.DataColumn("RPMsetup", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRPMsetup);
                this.columnECVOn = new global::System.Data.DataColumn("ECVOn", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECVOn);
                this.columnECVOff = new global::System.Data.DataColumn("ECVOff", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECVOff);
                this.columnECVHz = new global::System.Data.DataColumn("ECVHz", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECVHz);
                this.columnECVDC = new global::System.Data.DataColumn("ECVDC", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECVDC);
                this.columnCoilOn = new global::System.Data.DataColumn("CoilOn", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoilOn);
                this.columnCoilOff = new global::System.Data.DataColumn("CoilOff", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoilOff);
                this.columnExpr2 = new global::System.Data.DataColumn("Expr2", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpr2);
                this.columnExpr3 = new global::System.Data.DataColumn("Expr3", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpr3);
                this.columnExpr4 = new global::System.Data.DataColumn("Expr4", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpr4);
                this.columnExpr5 = new global::System.Data.DataColumn("Expr5", typeof(global::System.TimeSpan), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpr5);
                this.columnExpr6 = new global::System.Data.DataColumn("Expr6", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnExpr6);
                this.columnPdischarge = new global::System.Data.DataColumn("Pdischarge", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPdischarge);
                this.columnPsuction = new global::System.Data.DataColumn("Psuction", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPsuction);
                this.columnTdischarge = new global::System.Data.DataColumn("Tdischarge", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTdischarge);
                this.columnTsuction = new global::System.Data.DataColumn("Tsuction", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTsuction);
                this.columnTcondenserIn = new global::System.Data.DataColumn("TcondenserIn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTcondenserIn);
                this.columnTcondenserOut = new global::System.Data.DataColumn("TcondenserOut", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTcondenserOut);
                this.columnTEvapuratorIn = new global::System.Data.DataColumn("TEvapuratorIn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEvapuratorIn);
                this.columnTEvapuratorOut = new global::System.Data.DataColumn("TEvapuratorOut", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTEvapuratorOut);
                this.columnTAirIn = new global::System.Data.DataColumn("TAirIn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTAirIn);
                this.columnTAirOut = new global::System.Data.DataColumn("TAirOut", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTAirOut);
                this.columnHAirIn = new global::System.Data.DataColumn("HAirIn", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHAirIn);
                this.columnHAirOut = new global::System.Data.DataColumn("HAirOut", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHAirOut);
                this.columnTCompressor = new global::System.Data.DataColumn("TCompressor", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTCompressor);
                this.columnTHotbox = new global::System.Data.DataColumn("THotbox", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTHotbox);
                this.columnRPM = new global::System.Data.DataColumn("RPM", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRPM);
                this.columnCoilVoltage = new global::System.Data.DataColumn("CoilVoltage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoilVoltage);
                this.columnCoilCurrent = new global::System.Data.DataColumn("CoilCurrent", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCoilCurrent);
                this.columnECVVoltage = new global::System.Data.DataColumn("ECVVoltage", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECVVoltage);
                this.columnClutchTotalCycles = new global::System.Data.DataColumn("ClutchTotalCycles", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClutchTotalCycles);
                this.columnECVCurrent = new global::System.Data.DataColumn("ECVCurrent", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnECVCurrent);
                this.columnID_Comments = new global::System.Data.DataColumn("ID_Comments", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID_Comments);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnID_TestInput,
                                this.columnID_TestSetup,
                                this.columnExpr4,
                                this.columnID_Comments}, true));
                this.columnID_TestInput.AllowDBNull = false;
                this.columnID_TestInput.MaxLength = 20;
                this.columnTestNameInput.MaxLength = 50;
                this.columnCompressorDescription.MaxLength = 2147483647;
                this.columnRequester.MaxLength = 2147483647;
                this.columnComments.MaxLength = 2147483647;
                this.columnID_TestSetup.AllowDBNull = false;
                this.columnTestName.AllowDBNull = false;
                this.columnTestName.MaxLength = 50;
                this.columnStep.AllowDBNull = false;
                this.columnRequestedTime.AllowDBNull = false;
                this.columnPressureDischargeSetup.AllowDBNull = false;
                this.columnPressureSuctionSetup.AllowDBNull = false;
                this.columnHotBoxTemperature.AllowDBNull = false;
                this.columnCompressorLimitTemp.AllowDBNull = false;
                this.columnRPMsetup.AllowDBNull = false;
                this.columnExpr2.AllowDBNull = false;
                this.columnExpr3.AllowDBNull = false;
                this.columnExpr3.MaxLength = 2147483647;
                this.columnExpr4.AllowDBNull = false;
                this.columnExpr5.AllowDBNull = false;
                this.columnExpr6.AllowDBNull = false;
                this.columnPdischarge.AllowDBNull = false;
                this.columnPsuction.AllowDBNull = false;
                this.columnTdischarge.AllowDBNull = false;
                this.columnTsuction.AllowDBNull = false;
                this.columnTcondenserIn.AllowDBNull = false;
                this.columnTcondenserOut.AllowDBNull = false;
                this.columnTEvapuratorIn.AllowDBNull = false;
                this.columnTEvapuratorOut.AllowDBNull = false;
                this.columnTAirIn.AllowDBNull = false;
                this.columnTAirOut.AllowDBNull = false;
                this.columnHAirIn.AllowDBNull = false;
                this.columnHAirOut.AllowDBNull = false;
                this.columnTCompressor.AllowDBNull = false;
                this.columnTHotbox.AllowDBNull = false;
                this.columnRPM.AllowDBNull = false;
                this.columnCoilVoltage.AllowDBNull = false;
                this.columnCoilCurrent.AllowDBNull = false;
                this.columnECVVoltage.AllowDBNull = false;
                this.columnClutchTotalCycles.AllowDBNull = false;
                this.columnECVCurrent.AllowDBNull = false;
                this.columnID_Comments.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ToReportAllParametersRow NewToReportAllParametersRow() {
                return ((ToReportAllParametersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ToReportAllParametersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(ToReportAllParametersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ToReportAllParametersRowChanged != null)) {
                    this.ToReportAllParametersRowChanged(this, new ToReportAllParametersRowChangeEvent(((ToReportAllParametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ToReportAllParametersRowChanging != null)) {
                    this.ToReportAllParametersRowChanging(this, new ToReportAllParametersRowChangeEvent(((ToReportAllParametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ToReportAllParametersRowDeleted != null)) {
                    this.ToReportAllParametersRowDeleted(this, new ToReportAllParametersRowChangeEvent(((ToReportAllParametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ToReportAllParametersRowDeleting != null)) {
                    this.ToReportAllParametersRowDeleting(this, new ToReportAllParametersRowChangeEvent(((ToReportAllParametersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveToReportAllParametersRow(ToReportAllParametersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DatabaseDataSet ds = new DatabaseDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ToReportAllParametersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class TestCommentsRow : global::System.Data.DataRow {
            
            private TestCommentsDataTable tableTestComments;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TestCommentsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestComments = ((TestCommentsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ID_Comments {
                get {
                    return ((int)(this[this.tableTestComments.ID_CommentsColumn]));
                }
                set {
                    this[this.tableTestComments.ID_CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ID_TestInput {
                get {
                    return ((string)(this[this.tableTestComments.ID_TestInputColumn]));
                }
                set {
                    this[this.tableTestComments.ID_TestInputColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime Data {
                get {
                    return ((global::System.DateTime)(this[this.tableTestComments.DataColumn]));
                }
                set {
                    this[this.tableTestComments.DataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Comments {
                get {
                    return ((string)(this[this.tableTestComments.CommentsColumn]));
                }
                set {
                    this[this.tableTestComments.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionInputRow TestDescriptionInputRow {
                get {
                    return ((TestDescriptionInputRow)(this.GetParentRow(this.Table.ParentRelations["FK_TestComments_TestDescriptionInput"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TestComments_TestDescriptionInput"]);
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class TestDescriptionInputRow : global::System.Data.DataRow {
            
            private TestDescriptionInputDataTable tableTestDescriptionInput;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TestDescriptionInputRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestDescriptionInput = ((TestDescriptionInputDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ID_TestInput {
                get {
                    return ((string)(this[this.tableTestDescriptionInput.ID_TestInputColumn]));
                }
                set {
                    this[this.tableTestDescriptionInput.ID_TestInputColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TestNameInput {
                get {
                    try {
                        return ((string)(this[this.tableTestDescriptionInput.TestNameInputColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestNameInput\' in table \'TestDescriptionInput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestDescriptionInput.TestNameInputColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTestDescriptionInput.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'TestDescriptionInput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestDescriptionInput.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CompressorDescription {
                get {
                    try {
                        return ((string)(this[this.tableTestDescriptionInput.CompressorDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompressorDescription\' in table \'TestDescriptionInput\' is D" +
                                "BNull.", e);
                    }
                }
                set {
                    this[this.tableTestDescriptionInput.CompressorDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Requester {
                get {
                    try {
                        return ((string)(this[this.tableTestDescriptionInput.RequesterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Requester\' in table \'TestDescriptionInput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestDescriptionInput.RequesterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool CompressorPass {
                get {
                    try {
                        return ((bool)(this[this.tableTestDescriptionInput.CompressorPassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompressorPass\' in table \'TestDescriptionInput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestDescriptionInput.CompressorPassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime FinishDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableTestDescriptionInput.FinishDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinishDate\' in table \'TestDescriptionInput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestDescriptionInput.FinishDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableTestDescriptionInput.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'TestDescriptionInput\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestDescriptionInput.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ID_TestDescSetup {
                get {
                    try {
                        return ((int)(this[this.tableTestDescriptionInput.ID_TestDescSetupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID_TestDescSetup\' in table \'TestDescriptionInput\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableTestDescriptionInput.ID_TestDescSetupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionSetupRow TestDescriptionSetupRow {
                get {
                    return ((TestDescriptionSetupRow)(this.GetParentRow(this.Table.ParentRelations["FK_TestDescriptionInput_TestDescriptionSetup1"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TestDescriptionInput_TestDescriptionSetup1"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTestNameInputNull() {
                return this.IsNull(this.tableTestDescriptionInput.TestNameInputColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTestNameInputNull() {
                this[this.tableTestDescriptionInput.TestNameInputColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableTestDescriptionInput.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStartDateNull() {
                this[this.tableTestDescriptionInput.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompressorDescriptionNull() {
                return this.IsNull(this.tableTestDescriptionInput.CompressorDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCompressorDescriptionNull() {
                this[this.tableTestDescriptionInput.CompressorDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRequesterNull() {
                return this.IsNull(this.tableTestDescriptionInput.RequesterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRequesterNull() {
                this[this.tableTestDescriptionInput.RequesterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompressorPassNull() {
                return this.IsNull(this.tableTestDescriptionInput.CompressorPassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCompressorPassNull() {
                this[this.tableTestDescriptionInput.CompressorPassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFinishDateNull() {
                return this.IsNull(this.tableTestDescriptionInput.FinishDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFinishDateNull() {
                this[this.tableTestDescriptionInput.FinishDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableTestDescriptionInput.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCommentsNull() {
                this[this.tableTestDescriptionInput.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsID_TestDescSetupNull() {
                return this.IsNull(this.tableTestDescriptionInput.ID_TestDescSetupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetID_TestDescSetupNull() {
                this[this.tableTestDescriptionInput.ID_TestDescSetupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestCommentsRow[] GetTestCommentsRows() {
                if ((this.Table.ChildRelations["FK_TestComments_TestDescriptionInput"] == null)) {
                    return new TestCommentsRow[0];
                }
                else {
                    return ((TestCommentsRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TestComments_TestDescriptionInput"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestParametersRow[] GetTestParametersRows() {
                if ((this.Table.ChildRelations["FK_TestParameters_TestDescriptionInput"] == null)) {
                    return new TestParametersRow[0];
                }
                else {
                    return ((TestParametersRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TestParameters_TestDescriptionInput"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class TestDescriptionSetupRow : global::System.Data.DataRow {
            
            private TestDescriptionSetupDataTable tableTestDescriptionSetup;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TestDescriptionSetupRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestDescriptionSetup = ((TestDescriptionSetupDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ID_TestSetup {
                get {
                    return ((int)(this[this.tableTestDescriptionSetup.ID_TestSetupColumn]));
                }
                set {
                    this[this.tableTestDescriptionSetup.ID_TestSetupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TestName {
                get {
                    return ((string)(this[this.tableTestDescriptionSetup.TestNameColumn]));
                }
                set {
                    this[this.tableTestDescriptionSetup.TestNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Step {
                get {
                    return ((int)(this[this.tableTestDescriptionSetup.StepColumn]));
                }
                set {
                    this[this.tableTestDescriptionSetup.StepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RequestedTime {
                get {
                    return ((int)(this[this.tableTestDescriptionSetup.RequestedTimeColumn]));
                }
                set {
                    this[this.tableTestDescriptionSetup.RequestedTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double PressureDischargeSetup {
                get {
                    return ((double)(this[this.tableTestDescriptionSetup.PressureDischargeSetupColumn]));
                }
                set {
                    this[this.tableTestDescriptionSetup.PressureDischargeSetupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double PressureSuctionSetup {
                get {
                    return ((double)(this[this.tableTestDescriptionSetup.PressureSuctionSetupColumn]));
                }
                set {
                    this[this.tableTestDescriptionSetup.PressureSuctionSetupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double HotBoxTemperature {
                get {
                    return ((double)(this[this.tableTestDescriptionSetup.HotBoxTemperatureColumn]));
                }
                set {
                    this[this.tableTestDescriptionSetup.HotBoxTemperatureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double CompressorLimitTemp {
                get {
                    return ((double)(this[this.tableTestDescriptionSetup.CompressorLimitTempColumn]));
                }
                set {
                    this[this.tableTestDescriptionSetup.CompressorLimitTempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RPMsetup {
                get {
                    return ((int)(this[this.tableTestDescriptionSetup.RPMsetupColumn]));
                }
                set {
                    this[this.tableTestDescriptionSetup.RPMsetupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ECVOn {
                get {
                    try {
                        return ((int)(this[this.tableTestDescriptionSetup.ECVOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ECVOn\' in table \'TestDescriptionSetup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestDescriptionSetup.ECVOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ECVOff {
                get {
                    try {
                        return ((int)(this[this.tableTestDescriptionSetup.ECVOffColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ECVOff\' in table \'TestDescriptionSetup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestDescriptionSetup.ECVOffColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ECVHz {
                get {
                    try {
                        return ((int)(this[this.tableTestDescriptionSetup.ECVHzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ECVHz\' in table \'TestDescriptionSetup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestDescriptionSetup.ECVHzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ECVDC {
                get {
                    try {
                        return ((int)(this[this.tableTestDescriptionSetup.ECVDCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ECVDC\' in table \'TestDescriptionSetup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestDescriptionSetup.ECVDCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CoilOn {
                get {
                    try {
                        return ((int)(this[this.tableTestDescriptionSetup.CoilOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoilOn\' in table \'TestDescriptionSetup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestDescriptionSetup.CoilOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CoilOff {
                get {
                    try {
                        return ((int)(this[this.tableTestDescriptionSetup.CoilOffColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoilOff\' in table \'TestDescriptionSetup\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestDescriptionSetup.CoilOffColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsECVOnNull() {
                return this.IsNull(this.tableTestDescriptionSetup.ECVOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetECVOnNull() {
                this[this.tableTestDescriptionSetup.ECVOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsECVOffNull() {
                return this.IsNull(this.tableTestDescriptionSetup.ECVOffColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetECVOffNull() {
                this[this.tableTestDescriptionSetup.ECVOffColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsECVHzNull() {
                return this.IsNull(this.tableTestDescriptionSetup.ECVHzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetECVHzNull() {
                this[this.tableTestDescriptionSetup.ECVHzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsECVDCNull() {
                return this.IsNull(this.tableTestDescriptionSetup.ECVDCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetECVDCNull() {
                this[this.tableTestDescriptionSetup.ECVDCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCoilOnNull() {
                return this.IsNull(this.tableTestDescriptionSetup.CoilOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCoilOnNull() {
                this[this.tableTestDescriptionSetup.CoilOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCoilOffNull() {
                return this.IsNull(this.tableTestDescriptionSetup.CoilOffColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCoilOffNull() {
                this[this.tableTestDescriptionSetup.CoilOffColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionInputRow[] GetTestDescriptionInputRows() {
                if ((this.Table.ChildRelations["FK_TestDescriptionInput_TestDescriptionSetup1"] == null)) {
                    return new TestDescriptionInputRow[0];
                }
                else {
                    return ((TestDescriptionInputRow[])(base.GetChildRows(this.Table.ChildRelations["FK_TestDescriptionInput_TestDescriptionSetup1"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class TestParametersRow : global::System.Data.DataRow {
            
            private TestParametersDataTable tableTestParameters;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal TestParametersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTestParameters = ((TestParametersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal ID_TestSetupParameters {
                get {
                    return ((decimal)(this[this.tableTestParameters.ID_TestSetupParametersColumn]));
                }
                set {
                    this[this.tableTestParameters.ID_TestSetupParametersColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TestInputID {
                get {
                    try {
                        return ((string)(this[this.tableTestParameters.TestInputIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestInputID\' in table \'TestParameters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableTestParameters.TestInputIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime Data {
                get {
                    return ((global::System.DateTime)(this[this.tableTestParameters.DataColumn]));
                }
                set {
                    this[this.tableTestParameters.DataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.TimeSpan Time {
                get {
                    return ((global::System.TimeSpan)(this[this.tableTestParameters.TimeColumn]));
                }
                set {
                    this[this.tableTestParameters.TimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double Pdischarge {
                get {
                    return ((double)(this[this.tableTestParameters.PdischargeColumn]));
                }
                set {
                    this[this.tableTestParameters.PdischargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double Psuction {
                get {
                    return ((double)(this[this.tableTestParameters.PsuctionColumn]));
                }
                set {
                    this[this.tableTestParameters.PsuctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double Tdischarge {
                get {
                    return ((double)(this[this.tableTestParameters.TdischargeColumn]));
                }
                set {
                    this[this.tableTestParameters.TdischargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double Tsuction {
                get {
                    return ((double)(this[this.tableTestParameters.TsuctionColumn]));
                }
                set {
                    this[this.tableTestParameters.TsuctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double TcondenserIn {
                get {
                    return ((double)(this[this.tableTestParameters.TcondenserInColumn]));
                }
                set {
                    this[this.tableTestParameters.TcondenserInColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double TcondenserOut {
                get {
                    return ((double)(this[this.tableTestParameters.TcondenserOutColumn]));
                }
                set {
                    this[this.tableTestParameters.TcondenserOutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double TEvapuratorIn {
                get {
                    return ((double)(this[this.tableTestParameters.TEvapuratorInColumn]));
                }
                set {
                    this[this.tableTestParameters.TEvapuratorInColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double TEvapuratorOut {
                get {
                    return ((double)(this[this.tableTestParameters.TEvapuratorOutColumn]));
                }
                set {
                    this[this.tableTestParameters.TEvapuratorOutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double TAirIn {
                get {
                    return ((double)(this[this.tableTestParameters.TAirInColumn]));
                }
                set {
                    this[this.tableTestParameters.TAirInColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double TAirOut {
                get {
                    return ((double)(this[this.tableTestParameters.TAirOutColumn]));
                }
                set {
                    this[this.tableTestParameters.TAirOutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double HAirIn {
                get {
                    return ((double)(this[this.tableTestParameters.HAirInColumn]));
                }
                set {
                    this[this.tableTestParameters.HAirInColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double HAirOut {
                get {
                    return ((double)(this[this.tableTestParameters.HAirOutColumn]));
                }
                set {
                    this[this.tableTestParameters.HAirOutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double TCompressor {
                get {
                    return ((double)(this[this.tableTestParameters.TCompressorColumn]));
                }
                set {
                    this[this.tableTestParameters.TCompressorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double THotbox {
                get {
                    return ((double)(this[this.tableTestParameters.THotboxColumn]));
                }
                set {
                    this[this.tableTestParameters.THotboxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double RPM {
                get {
                    return ((double)(this[this.tableTestParameters.RPMColumn]));
                }
                set {
                    this[this.tableTestParameters.RPMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double CoilVoltage {
                get {
                    return ((double)(this[this.tableTestParameters.CoilVoltageColumn]));
                }
                set {
                    this[this.tableTestParameters.CoilVoltageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double CoilCurrent {
                get {
                    return ((double)(this[this.tableTestParameters.CoilCurrentColumn]));
                }
                set {
                    this[this.tableTestParameters.CoilCurrentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double ECVVoltage {
                get {
                    return ((double)(this[this.tableTestParameters.ECVVoltageColumn]));
                }
                set {
                    this[this.tableTestParameters.ECVVoltageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double ECVCurrent {
                get {
                    return ((double)(this[this.tableTestParameters.ECVCurrentColumn]));
                }
                set {
                    this[this.tableTestParameters.ECVCurrentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ClutchTotalCycles {
                get {
                    return ((int)(this[this.tableTestParameters.ClutchTotalCyclesColumn]));
                }
                set {
                    this[this.tableTestParameters.ClutchTotalCyclesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionInputRow TestDescriptionInputRow {
                get {
                    return ((TestDescriptionInputRow)(this.GetParentRow(this.Table.ParentRelations["FK_TestParameters_TestDescriptionInput"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_TestParameters_TestDescriptionInput"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTestInputIDNull() {
                return this.IsNull(this.tableTestParameters.TestInputIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTestInputIDNull() {
                this[this.tableTestParameters.TestInputIDColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ShotTestInfoRow : global::System.Data.DataRow {
            
            private ShotTestInfoDataTable tableShotTestInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ShotTestInfoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableShotTestInfo = ((ShotTestInfoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TestNameInput {
                get {
                    try {
                        return ((string)(this[this.tableShotTestInfo.TestNameInputColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestNameInput\' in table \'ShotTestInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShotTestInfo.TestNameInputColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CompressorDescription {
                get {
                    try {
                        return ((string)(this[this.tableShotTestInfo.CompressorDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompressorDescription\' in table \'ShotTestInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShotTestInfo.CompressorDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Requester {
                get {
                    try {
                        return ((string)(this[this.tableShotTestInfo.RequesterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Requester\' in table \'ShotTestInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShotTestInfo.RequesterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableShotTestInfo.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'ShotTestInfo\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableShotTestInfo.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime Data {
                get {
                    return ((global::System.DateTime)(this[this.tableShotTestInfo.DataColumn]));
                }
                set {
                    this[this.tableShotTestInfo.DataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Comments {
                get {
                    return ((string)(this[this.tableShotTestInfo.CommentsColumn]));
                }
                set {
                    this[this.tableShotTestInfo.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TestName {
                get {
                    return ((string)(this[this.tableShotTestInfo.TestNameColumn]));
                }
                set {
                    this[this.tableShotTestInfo.TestNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Step {
                get {
                    return ((int)(this[this.tableShotTestInfo.StepColumn]));
                }
                set {
                    this[this.tableShotTestInfo.StepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTestNameInputNull() {
                return this.IsNull(this.tableShotTestInfo.TestNameInputColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTestNameInputNull() {
                this[this.tableShotTestInfo.TestNameInputColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompressorDescriptionNull() {
                return this.IsNull(this.tableShotTestInfo.CompressorDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCompressorDescriptionNull() {
                this[this.tableShotTestInfo.CompressorDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRequesterNull() {
                return this.IsNull(this.tableShotTestInfo.RequesterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRequesterNull() {
                this[this.tableShotTestInfo.RequesterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableShotTestInfo.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStartDateNull() {
                this[this.tableShotTestInfo.StartDateColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ToReportAllParametersRow : global::System.Data.DataRow {
            
            private ToReportAllParametersDataTable tableToReportAllParameters;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal ToReportAllParametersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableToReportAllParameters = ((ToReportAllParametersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ID_TestInput {
                get {
                    return ((string)(this[this.tableToReportAllParameters.ID_TestInputColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.ID_TestInputColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TestNameInput {
                get {
                    try {
                        return ((string)(this[this.tableToReportAllParameters.TestNameInputColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TestNameInput\' in table \'ToReportAllParameters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToReportAllParameters.TestNameInputColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime StartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableToReportAllParameters.StartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartDate\' in table \'ToReportAllParameters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToReportAllParameters.StartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string CompressorDescription {
                get {
                    try {
                        return ((string)(this[this.tableToReportAllParameters.CompressorDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompressorDescription\' in table \'ToReportAllParameters\' is " +
                                "DBNull.", e);
                    }
                }
                set {
                    this[this.tableToReportAllParameters.CompressorDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Requester {
                get {
                    try {
                        return ((string)(this[this.tableToReportAllParameters.RequesterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Requester\' in table \'ToReportAllParameters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToReportAllParameters.RequesterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool CompressorPass {
                get {
                    try {
                        return ((bool)(this[this.tableToReportAllParameters.CompressorPassColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompressorPass\' in table \'ToReportAllParameters\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableToReportAllParameters.CompressorPassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime FinishDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableToReportAllParameters.FinishDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinishDate\' in table \'ToReportAllParameters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToReportAllParameters.FinishDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Comments {
                get {
                    try {
                        return ((string)(this[this.tableToReportAllParameters.CommentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comments\' in table \'ToReportAllParameters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToReportAllParameters.CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ID_TestDescSetup {
                get {
                    try {
                        return ((int)(this[this.tableToReportAllParameters.ID_TestDescSetupColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID_TestDescSetup\' in table \'ToReportAllParameters\' is DBNul" +
                                "l.", e);
                    }
                }
                set {
                    this[this.tableToReportAllParameters.ID_TestDescSetupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ID_TestSetup {
                get {
                    return ((int)(this[this.tableToReportAllParameters.ID_TestSetupColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.ID_TestSetupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string TestName {
                get {
                    return ((string)(this[this.tableToReportAllParameters.TestNameColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.TestNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Step {
                get {
                    return ((int)(this[this.tableToReportAllParameters.StepColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.StepColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RequestedTime {
                get {
                    return ((int)(this[this.tableToReportAllParameters.RequestedTimeColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.RequestedTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double PressureDischargeSetup {
                get {
                    return ((double)(this[this.tableToReportAllParameters.PressureDischargeSetupColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.PressureDischargeSetupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double PressureSuctionSetup {
                get {
                    return ((double)(this[this.tableToReportAllParameters.PressureSuctionSetupColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.PressureSuctionSetupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double HotBoxTemperature {
                get {
                    return ((double)(this[this.tableToReportAllParameters.HotBoxTemperatureColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.HotBoxTemperatureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double CompressorLimitTemp {
                get {
                    return ((double)(this[this.tableToReportAllParameters.CompressorLimitTempColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.CompressorLimitTempColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int RPMsetup {
                get {
                    return ((int)(this[this.tableToReportAllParameters.RPMsetupColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.RPMsetupColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ECVOn {
                get {
                    try {
                        return ((int)(this[this.tableToReportAllParameters.ECVOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ECVOn\' in table \'ToReportAllParameters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToReportAllParameters.ECVOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ECVOff {
                get {
                    try {
                        return ((int)(this[this.tableToReportAllParameters.ECVOffColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ECVOff\' in table \'ToReportAllParameters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToReportAllParameters.ECVOffColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ECVHz {
                get {
                    try {
                        return ((int)(this[this.tableToReportAllParameters.ECVHzColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ECVHz\' in table \'ToReportAllParameters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToReportAllParameters.ECVHzColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ECVDC {
                get {
                    try {
                        return ((int)(this[this.tableToReportAllParameters.ECVDCColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ECVDC\' in table \'ToReportAllParameters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToReportAllParameters.ECVDCColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CoilOn {
                get {
                    try {
                        return ((int)(this[this.tableToReportAllParameters.CoilOnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoilOn\' in table \'ToReportAllParameters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToReportAllParameters.CoilOnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int CoilOff {
                get {
                    try {
                        return ((int)(this[this.tableToReportAllParameters.CoilOffColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CoilOff\' in table \'ToReportAllParameters\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableToReportAllParameters.CoilOffColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime Expr2 {
                get {
                    return ((global::System.DateTime)(this[this.tableToReportAllParameters.Expr2Column]));
                }
                set {
                    this[this.tableToReportAllParameters.Expr2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string Expr3 {
                get {
                    return ((string)(this[this.tableToReportAllParameters.Expr3Column]));
                }
                set {
                    this[this.tableToReportAllParameters.Expr3Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public decimal Expr4 {
                get {
                    return ((decimal)(this[this.tableToReportAllParameters.Expr4Column]));
                }
                set {
                    this[this.tableToReportAllParameters.Expr4Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.TimeSpan Expr5 {
                get {
                    return ((global::System.TimeSpan)(this[this.tableToReportAllParameters.Expr5Column]));
                }
                set {
                    this[this.tableToReportAllParameters.Expr5Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime Expr6 {
                get {
                    return ((global::System.DateTime)(this[this.tableToReportAllParameters.Expr6Column]));
                }
                set {
                    this[this.tableToReportAllParameters.Expr6Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double Pdischarge {
                get {
                    return ((double)(this[this.tableToReportAllParameters.PdischargeColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.PdischargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double Psuction {
                get {
                    return ((double)(this[this.tableToReportAllParameters.PsuctionColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.PsuctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double Tdischarge {
                get {
                    return ((double)(this[this.tableToReportAllParameters.TdischargeColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.TdischargeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double Tsuction {
                get {
                    return ((double)(this[this.tableToReportAllParameters.TsuctionColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.TsuctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double TcondenserIn {
                get {
                    return ((double)(this[this.tableToReportAllParameters.TcondenserInColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.TcondenserInColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double TcondenserOut {
                get {
                    return ((double)(this[this.tableToReportAllParameters.TcondenserOutColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.TcondenserOutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double TEvapuratorIn {
                get {
                    return ((double)(this[this.tableToReportAllParameters.TEvapuratorInColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.TEvapuratorInColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double TEvapuratorOut {
                get {
                    return ((double)(this[this.tableToReportAllParameters.TEvapuratorOutColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.TEvapuratorOutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double TAirIn {
                get {
                    return ((double)(this[this.tableToReportAllParameters.TAirInColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.TAirInColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double TAirOut {
                get {
                    return ((double)(this[this.tableToReportAllParameters.TAirOutColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.TAirOutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double HAirIn {
                get {
                    return ((double)(this[this.tableToReportAllParameters.HAirInColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.HAirInColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double HAirOut {
                get {
                    return ((double)(this[this.tableToReportAllParameters.HAirOutColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.HAirOutColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double TCompressor {
                get {
                    return ((double)(this[this.tableToReportAllParameters.TCompressorColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.TCompressorColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double THotbox {
                get {
                    return ((double)(this[this.tableToReportAllParameters.THotboxColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.THotboxColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double RPM {
                get {
                    return ((double)(this[this.tableToReportAllParameters.RPMColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.RPMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double CoilVoltage {
                get {
                    return ((double)(this[this.tableToReportAllParameters.CoilVoltageColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.CoilVoltageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double CoilCurrent {
                get {
                    return ((double)(this[this.tableToReportAllParameters.CoilCurrentColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.CoilCurrentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double ECVVoltage {
                get {
                    return ((double)(this[this.tableToReportAllParameters.ECVVoltageColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.ECVVoltageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ClutchTotalCycles {
                get {
                    return ((int)(this[this.tableToReportAllParameters.ClutchTotalCyclesColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.ClutchTotalCyclesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double ECVCurrent {
                get {
                    return ((double)(this[this.tableToReportAllParameters.ECVCurrentColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.ECVCurrentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int ID_Comments {
                get {
                    return ((int)(this[this.tableToReportAllParameters.ID_CommentsColumn]));
                }
                set {
                    this[this.tableToReportAllParameters.ID_CommentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsTestNameInputNull() {
                return this.IsNull(this.tableToReportAllParameters.TestNameInputColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetTestNameInputNull() {
                this[this.tableToReportAllParameters.TestNameInputColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsStartDateNull() {
                return this.IsNull(this.tableToReportAllParameters.StartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetStartDateNull() {
                this[this.tableToReportAllParameters.StartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompressorDescriptionNull() {
                return this.IsNull(this.tableToReportAllParameters.CompressorDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCompressorDescriptionNull() {
                this[this.tableToReportAllParameters.CompressorDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsRequesterNull() {
                return this.IsNull(this.tableToReportAllParameters.RequesterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetRequesterNull() {
                this[this.tableToReportAllParameters.RequesterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCompressorPassNull() {
                return this.IsNull(this.tableToReportAllParameters.CompressorPassColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCompressorPassNull() {
                this[this.tableToReportAllParameters.CompressorPassColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsFinishDateNull() {
                return this.IsNull(this.tableToReportAllParameters.FinishDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetFinishDateNull() {
                this[this.tableToReportAllParameters.FinishDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCommentsNull() {
                return this.IsNull(this.tableToReportAllParameters.CommentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCommentsNull() {
                this[this.tableToReportAllParameters.CommentsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsID_TestDescSetupNull() {
                return this.IsNull(this.tableToReportAllParameters.ID_TestDescSetupColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetID_TestDescSetupNull() {
                this[this.tableToReportAllParameters.ID_TestDescSetupColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsECVOnNull() {
                return this.IsNull(this.tableToReportAllParameters.ECVOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetECVOnNull() {
                this[this.tableToReportAllParameters.ECVOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsECVOffNull() {
                return this.IsNull(this.tableToReportAllParameters.ECVOffColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetECVOffNull() {
                this[this.tableToReportAllParameters.ECVOffColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsECVHzNull() {
                return this.IsNull(this.tableToReportAllParameters.ECVHzColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetECVHzNull() {
                this[this.tableToReportAllParameters.ECVHzColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsECVDCNull() {
                return this.IsNull(this.tableToReportAllParameters.ECVDCColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetECVDCNull() {
                this[this.tableToReportAllParameters.ECVDCColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCoilOnNull() {
                return this.IsNull(this.tableToReportAllParameters.CoilOnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCoilOnNull() {
                this[this.tableToReportAllParameters.CoilOnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsCoilOffNull() {
                return this.IsNull(this.tableToReportAllParameters.CoilOffColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetCoilOffNull() {
                this[this.tableToReportAllParameters.CoilOffColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TestCommentsRowChangeEvent : global::System.EventArgs {
            
            private TestCommentsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestCommentsRowChangeEvent(TestCommentsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestCommentsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TestDescriptionInputRowChangeEvent : global::System.EventArgs {
            
            private TestDescriptionInputRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionInputRowChangeEvent(TestDescriptionInputRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionInputRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TestDescriptionSetupRowChangeEvent : global::System.EventArgs {
            
            private TestDescriptionSetupRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionSetupRowChangeEvent(TestDescriptionSetupRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestDescriptionSetupRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class TestParametersRowChangeEvent : global::System.EventArgs {
            
            private TestParametersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestParametersRowChangeEvent(TestParametersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public TestParametersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ShotTestInfoRowChangeEvent : global::System.EventArgs {
            
            private ShotTestInfoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShotTestInfoRowChangeEvent(ShotTestInfoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ShotTestInfoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class ToReportAllParametersRowChangeEvent : global::System.EventArgs {
            
            private ToReportAllParametersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ToReportAllParametersRowChangeEvent(ToReportAllParametersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public ToReportAllParametersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Tester_VFS169.DatabaseDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TestCommentsTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public TestCommentsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TestComments";
            tableMapping.ColumnMappings.Add("ID_Comments", "ID_Comments");
            tableMapping.ColumnMappings.Add("ID_TestInput", "ID_TestInput");
            tableMapping.ColumnMappings.Add("Data", "Data");
            tableMapping.ColumnMappings.Add("Comments", "Comments");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TestComments] WHERE (([ID_Comments] = @Original_ID_Comments) A" +
                "ND ([ID_TestInput] = @Original_ID_TestInput) AND ([Data] = @Original_Data))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_Comments", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_Comments", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_TestInput", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestInput", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Data", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Data", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TestComments] ([ID_Comments], [ID_TestInput], [Data], [Comment" +
                "s]) VALUES (@ID_Comments, @ID_TestInput, @Data, @Comments);\r\nSELECT ID_Comments," +
                " ID_TestInput, Data, Comments FROM TestComments WHERE (ID_Comments = @ID_Comment" +
                "s)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_Comments", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_Comments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_TestInput", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestInput", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Data", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Data", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comments", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TestComments] SET [ID_Comments] = @ID_Comments, [ID_TestInput] = @ID_TestInput, [Data] = @Data, [Comments] = @Comments WHERE (([ID_Comments] = @Original_ID_Comments) AND ([ID_TestInput] = @Original_ID_TestInput) AND ([Data] = @Original_Data));
SELECT ID_Comments, ID_TestInput, Data, Comments FROM TestComments WHERE (ID_Comments = @ID_Comments)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_Comments", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_Comments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_TestInput", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestInput", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Data", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Data", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comments", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_Comments", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_Comments", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_TestInput", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestInput", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Data", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Data", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Tester_VFS169.Properties.Settings.Default.DatabaseConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID_Comments, ID_TestInput, Data, Comments FROM dbo.TestComments";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DatabaseDataSet.TestCommentsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DatabaseDataSet.TestCommentsDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DatabaseDataSet.TestCommentsDataTable dataTable = new DatabaseDataSet.TestCommentsDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DatabaseDataSet.TestCommentsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DatabaseDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TestComments");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_Comments, string Original_ID_TestInput, System.DateTime Original_Data) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID_Comments));
            if ((Original_ID_TestInput == null)) {
                throw new global::System.ArgumentNullException("Original_ID_TestInput");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_ID_TestInput));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((System.DateTime)(Original_Data));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID_Comments, string ID_TestInput, System.DateTime Data, string Comments) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID_Comments));
            if ((ID_TestInput == null)) {
                throw new global::System.ArgumentNullException("ID_TestInput");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(ID_TestInput));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(Data));
            if ((Comments == null)) {
                throw new global::System.ArgumentNullException("Comments");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Comments));
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(int ID_Comments, string ID_TestInput, System.DateTime Data, string Comments, int Original_ID_Comments, string Original_ID_TestInput, System.DateTime Original_Data) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID_Comments));
            if ((ID_TestInput == null)) {
                throw new global::System.ArgumentNullException("ID_TestInput");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(ID_TestInput));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(Data));
            if ((Comments == null)) {
                throw new global::System.ArgumentNullException("Comments");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Comments));
            }
            this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Original_ID_Comments));
            if ((Original_ID_TestInput == null)) {
                throw new global::System.ArgumentNullException("Original_ID_TestInput");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(Original_ID_TestInput));
            }
            this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(Original_Data));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ID_TestInput, System.DateTime Data, string Comments, int Original_ID_Comments, string Original_ID_TestInput, System.DateTime Original_Data) {
            return this.Update(Original_ID_Comments, ID_TestInput, Data, Comments, Original_ID_Comments, Original_ID_TestInput, Original_Data);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TestDescriptionInputTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public TestDescriptionInputTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TestDescriptionInput";
            tableMapping.ColumnMappings.Add("ID_TestInput", "ID_TestInput");
            tableMapping.ColumnMappings.Add("TestNameInput", "TestNameInput");
            tableMapping.ColumnMappings.Add("StartDate", "StartDate");
            tableMapping.ColumnMappings.Add("CompressorDescription", "CompressorDescription");
            tableMapping.ColumnMappings.Add("Requester", "Requester");
            tableMapping.ColumnMappings.Add("CompressorPass", "CompressorPass");
            tableMapping.ColumnMappings.Add("FinishDate", "FinishDate");
            tableMapping.ColumnMappings.Add("Comments", "Comments");
            tableMapping.ColumnMappings.Add("ID_TestDescSetup", "ID_TestDescSetup");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TestDescriptionInput] WHERE (([ID_TestInput] = @Original_ID_TestInput) AND ((@IsNull_TestNameInput = 1 AND [TestNameInput] IS NULL) OR ([TestNameInput] = @Original_TestNameInput)) AND ((@IsNull_StartDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Original_StartDate)) AND ((@IsNull_CompressorPass = 1 AND [CompressorPass] IS NULL) OR ([CompressorPass] = @Original_CompressorPass)) AND ((@IsNull_FinishDate = 1 AND [FinishDate] IS NULL) OR ([FinishDate] = @Original_FinishDate)) AND ((@IsNull_ID_TestDescSetup = 1 AND [ID_TestDescSetup] IS NULL) OR ([ID_TestDescSetup] = @Original_ID_TestDescSetup)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_TestInput", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestInput", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TestNameInput", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestNameInput", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestNameInput", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestNameInput", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CompressorPass", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompressorPass", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CompressorPass", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompressorPass", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FinishDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinishDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FinishDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinishDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ID_TestDescSetup", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestDescSetup", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_TestDescSetup", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestDescSetup", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TestDescriptionInput] ([ID_TestInput], [TestNameInput], [StartDate], [CompressorDescription], [Requester], [CompressorPass], [FinishDate], [Comments], [ID_TestDescSetup]) VALUES (@ID_TestInput, @TestNameInput, @StartDate, @CompressorDescription, @Requester, @CompressorPass, @FinishDate, @Comments, @ID_TestDescSetup);
SELECT ID_TestInput, TestNameInput, StartDate, CompressorDescription, Requester, CompressorPass, FinishDate, Comments, ID_TestDescSetup FROM TestDescriptionInput WHERE (ID_TestInput = @ID_TestInput)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_TestInput", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestInput", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestNameInput", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestNameInput", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompressorDescription", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompressorDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Requester", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Requester", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompressorPass", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompressorPass", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FinishDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinishDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comments", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_TestDescSetup", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestDescSetup", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = @"UPDATE [dbo].[TestDescriptionInput] SET [ID_TestInput] = @ID_TestInput, [TestNameInput] = @TestNameInput, [StartDate] = @StartDate, [CompressorDescription] = @CompressorDescription, [Requester] = @Requester, [CompressorPass] = @CompressorPass, [FinishDate] = @FinishDate, [Comments] = @Comments, [ID_TestDescSetup] = @ID_TestDescSetup WHERE (([ID_TestInput] = @Original_ID_TestInput) AND ((@IsNull_TestNameInput = 1 AND [TestNameInput] IS NULL) OR ([TestNameInput] = @Original_TestNameInput)) AND ((@IsNull_StartDate = 1 AND [StartDate] IS NULL) OR ([StartDate] = @Original_StartDate)) AND ((@IsNull_CompressorPass = 1 AND [CompressorPass] IS NULL) OR ([CompressorPass] = @Original_CompressorPass)) AND ((@IsNull_FinishDate = 1 AND [FinishDate] IS NULL) OR ([FinishDate] = @Original_FinishDate)) AND ((@IsNull_ID_TestDescSetup = 1 AND [ID_TestDescSetup] IS NULL) OR ([ID_TestDescSetup] = @Original_ID_TestDescSetup)));
SELECT ID_TestInput, TestNameInput, StartDate, CompressorDescription, Requester, CompressorPass, FinishDate, Comments, ID_TestDescSetup FROM TestDescriptionInput WHERE (ID_TestInput = @ID_TestInput)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_TestInput", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestInput", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestNameInput", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestNameInput", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompressorDescription", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompressorDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Requester", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Requester", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompressorPass", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompressorPass", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@FinishDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinishDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Comments", global::System.Data.SqlDbType.Text, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Comments", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_TestDescSetup", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestDescSetup", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_TestInput", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestInput", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TestNameInput", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestNameInput", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestNameInput", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestNameInput", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_StartDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_StartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "StartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CompressorPass", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompressorPass", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CompressorPass", global::System.Data.SqlDbType.Bit, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompressorPass", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_FinishDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinishDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_FinishDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "FinishDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ID_TestDescSetup", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestDescSetup", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_TestDescSetup", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestDescSetup", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Tester_VFS169.Properties.Settings.Default.DatabaseConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID_TestInput, TestNameInput, StartDate, CompressorDescription, Requester, " +
                "CompressorPass, FinishDate, Comments, ID_TestDescSetup FROM dbo.TestDescriptionI" +
                "nput";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DatabaseDataSet.TestDescriptionInputDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DatabaseDataSet.TestDescriptionInputDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DatabaseDataSet.TestDescriptionInputDataTable dataTable = new DatabaseDataSet.TestDescriptionInputDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DatabaseDataSet.TestDescriptionInputDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DatabaseDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TestDescriptionInput");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(string Original_ID_TestInput, string Original_TestNameInput, global::System.Nullable<global::System.DateTime> Original_StartDate, global::System.Nullable<bool> Original_CompressorPass, global::System.Nullable<global::System.DateTime> Original_FinishDate, global::System.Nullable<int> Original_ID_TestDescSetup) {
            if ((Original_ID_TestInput == null)) {
                throw new global::System.ArgumentNullException("Original_ID_TestInput");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[0].Value = ((string)(Original_ID_TestInput));
            }
            if ((Original_TestNameInput == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_TestNameInput));
            }
            if ((Original_StartDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_StartDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_CompressorPass.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((bool)(Original_CompressorPass.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Original_FinishDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_FinishDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[7].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_TestDescSetup.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_ID_TestDescSetup.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string ID_TestInput, string TestNameInput, global::System.Nullable<global::System.DateTime> StartDate, string CompressorDescription, string Requester, global::System.Nullable<bool> CompressorPass, global::System.Nullable<global::System.DateTime> FinishDate, string Comments, global::System.Nullable<int> ID_TestDescSetup) {
            if ((ID_TestInput == null)) {
                throw new global::System.ArgumentNullException("ID_TestInput");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(ID_TestInput));
            }
            if ((TestNameInput == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestNameInput));
            }
            if ((StartDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(StartDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((CompressorDescription == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(CompressorDescription));
            }
            if ((Requester == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Requester));
            }
            if ((CompressorPass.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((bool)(CompressorPass.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((FinishDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(FinishDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Comments == null)) {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Comments));
            }
            if ((ID_TestDescSetup.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(ID_TestDescSetup.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string ID_TestInput, string TestNameInput, global::System.Nullable<global::System.DateTime> StartDate, string CompressorDescription, string Requester, global::System.Nullable<bool> CompressorPass, global::System.Nullable<global::System.DateTime> FinishDate, string Comments, global::System.Nullable<int> ID_TestDescSetup, string Original_ID_TestInput, string Original_TestNameInput, global::System.Nullable<global::System.DateTime> Original_StartDate, global::System.Nullable<bool> Original_CompressorPass, global::System.Nullable<global::System.DateTime> Original_FinishDate, global::System.Nullable<int> Original_ID_TestDescSetup) {
            if ((ID_TestInput == null)) {
                throw new global::System.ArgumentNullException("ID_TestInput");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(ID_TestInput));
            }
            if ((TestNameInput == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestNameInput));
            }
            if ((StartDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(StartDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            if ((CompressorDescription == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(CompressorDescription));
            }
            if ((Requester == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Requester));
            }
            if ((CompressorPass.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((bool)(CompressorPass.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = global::System.DBNull.Value;
            }
            if ((FinishDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(FinishDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((Comments == null)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Comments));
            }
            if ((ID_TestDescSetup.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(ID_TestDescSetup.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_TestInput == null)) {
                throw new global::System.ArgumentNullException("Original_ID_TestInput");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Original_ID_TestInput));
            }
            if ((Original_TestNameInput == null)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[11].Value = ((string)(Original_TestNameInput));
            }
            if ((Original_StartDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((System.DateTime)(Original_StartDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((Original_CompressorPass.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[15].Value = ((bool)(Original_CompressorPass.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            if ((Original_FinishDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[17].Value = ((System.DateTime)(Original_FinishDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[17].Value = global::System.DBNull.Value;
            }
            if ((Original_ID_TestDescSetup.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[19].Value = ((int)(Original_ID_TestDescSetup.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[18].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[19].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TestNameInput, global::System.Nullable<global::System.DateTime> StartDate, string CompressorDescription, string Requester, global::System.Nullable<bool> CompressorPass, global::System.Nullable<global::System.DateTime> FinishDate, string Comments, global::System.Nullable<int> ID_TestDescSetup, string Original_ID_TestInput, string Original_TestNameInput, global::System.Nullable<global::System.DateTime> Original_StartDate, global::System.Nullable<bool> Original_CompressorPass, global::System.Nullable<global::System.DateTime> Original_FinishDate, global::System.Nullable<int> Original_ID_TestDescSetup) {
            return this.Update(Original_ID_TestInput, TestNameInput, StartDate, CompressorDescription, Requester, CompressorPass, FinishDate, Comments, ID_TestDescSetup, Original_ID_TestInput, Original_TestNameInput, Original_StartDate, Original_CompressorPass, Original_FinishDate, Original_ID_TestDescSetup);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TestDescriptionSetupTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public TestDescriptionSetupTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TestDescriptionSetup";
            tableMapping.ColumnMappings.Add("ID_TestSetup", "ID_TestSetup");
            tableMapping.ColumnMappings.Add("TestName", "TestName");
            tableMapping.ColumnMappings.Add("Step", "Step");
            tableMapping.ColumnMappings.Add("RequestedTime", "RequestedTime");
            tableMapping.ColumnMappings.Add("PressureDischargeSetup", "PressureDischargeSetup");
            tableMapping.ColumnMappings.Add("PressureSuctionSetup", "PressureSuctionSetup");
            tableMapping.ColumnMappings.Add("HotBoxTemperature", "HotBoxTemperature");
            tableMapping.ColumnMappings.Add("CompressorLimitTemp", "CompressorLimitTemp");
            tableMapping.ColumnMappings.Add("RPMsetup", "RPMsetup");
            tableMapping.ColumnMappings.Add("ECVOn", "ECVOn");
            tableMapping.ColumnMappings.Add("ECVOff", "ECVOff");
            tableMapping.ColumnMappings.Add("ECVHz", "ECVHz");
            tableMapping.ColumnMappings.Add("ECVDC", "ECVDC");
            tableMapping.ColumnMappings.Add("CoilOn", "CoilOn");
            tableMapping.ColumnMappings.Add("CoilOff", "CoilOff");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TestDescriptionSetup] WHERE (([ID_TestSetup] = @Original_ID_TestSetup) AND ([TestName] = @Original_TestName) AND ([Step] = @Original_Step) AND ([RequestedTime] = @Original_RequestedTime) AND ([PressureDischargeSetup] = @Original_PressureDischargeSetup) AND ([PressureSuctionSetup] = @Original_PressureSuctionSetup) AND ([HotBoxTemperature] = @Original_HotBoxTemperature) AND ([CompressorLimitTemp] = @Original_CompressorLimitTemp) AND ([RPMsetup] = @Original_RPMsetup) AND ((@IsNull_ECVOn = 1 AND [ECVOn] IS NULL) OR ([ECVOn] = @Original_ECVOn)) AND ((@IsNull_ECVOff = 1 AND [ECVOff] IS NULL) OR ([ECVOff] = @Original_ECVOff)) AND ((@IsNull_ECVHz = 1 AND [ECVHz] IS NULL) OR ([ECVHz] = @Original_ECVHz)) AND ((@IsNull_ECVDC = 1 AND [ECVDC] IS NULL) OR ([ECVDC] = @Original_ECVDC)) AND ((@IsNull_CoilOn = 1 AND [CoilOn] IS NULL) OR ([CoilOn] = @Original_CoilOn)) AND ((@IsNull_CoilOff = 1 AND [CoilOff] IS NULL) OR ([CoilOff] = @Original_CoilOff)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_TestSetup", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestSetup", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Step", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Step", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RequestedTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RequestedTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PressureDischargeSetup", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PressureDischargeSetup", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PressureSuctionSetup", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PressureSuctionSetup", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HotBoxTemperature", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HotBoxTemperature", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CompressorLimitTemp", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompressorLimitTemp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RPMsetup", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RPMsetup", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ECVOn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVOn", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ECVOn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVOn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ECVOff", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVOff", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ECVOff", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVOff", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ECVHz", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVHz", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ECVHz", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVHz", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ECVDC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVDC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ECVDC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVDC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CoilOn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilOn", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CoilOn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilOn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CoilOff", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilOff", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CoilOff", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilOff", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TestDescriptionSetup] ([ID_TestSetup], [TestName], [Step], [RequestedTime], [PressureDischargeSetup], [PressureSuctionSetup], [HotBoxTemperature], [CompressorLimitTemp], [RPMsetup], [ECVOn], [ECVOff], [ECVHz], [ECVDC], [CoilOn], [CoilOff]) VALUES (@ID_TestSetup, @TestName, @Step, @RequestedTime, @PressureDischargeSetup, @PressureSuctionSetup, @HotBoxTemperature, @CompressorLimitTemp, @RPMsetup, @ECVOn, @ECVOff, @ECVHz, @ECVDC, @CoilOn, @CoilOff);
SELECT ID_TestSetup, TestName, Step, RequestedTime, PressureDischargeSetup, PressureSuctionSetup, HotBoxTemperature, CompressorLimitTemp, RPMsetup, ECVOn, ECVOff, ECVHz, ECVDC, CoilOn, CoilOff FROM TestDescriptionSetup WHERE (ID_TestSetup = @ID_TestSetup)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_TestSetup", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestSetup", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Step", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Step", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RequestedTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RequestedTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PressureDischargeSetup", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PressureDischargeSetup", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PressureSuctionSetup", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PressureSuctionSetup", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HotBoxTemperature", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HotBoxTemperature", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompressorLimitTemp", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompressorLimitTemp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RPMsetup", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RPMsetup", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ECVOn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVOn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ECVOff", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVOff", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ECVHz", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVHz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ECVDC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVDC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CoilOn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilOn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CoilOff", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilOff", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TestDescriptionSetup] SET [ID_TestSetup] = @ID_TestSetup, [TestName" +
                "] = @TestName, [Step] = @Step, [RequestedTime] = @RequestedTime, [PressureDischa" +
                "rgeSetup] = @PressureDischargeSetup, [PressureSuctionSetup] = @PressureSuctionSe" +
                "tup, [HotBoxTemperature] = @HotBoxTemperature, [CompressorLimitTemp] = @Compress" +
                "orLimitTemp, [RPMsetup] = @RPMsetup, [ECVOn] = @ECVOn, [ECVOff] = @ECVOff, [ECVH" +
                "z] = @ECVHz, [ECVDC] = @ECVDC, [CoilOn] = @CoilOn, [CoilOff] = @CoilOff WHERE ((" +
                "[ID_TestSetup] = @Original_ID_TestSetup) AND ([TestName] = @Original_TestName) A" +
                "ND ([Step] = @Original_Step) AND ([RequestedTime] = @Original_RequestedTime) AND" +
                " ([PressureDischargeSetup] = @Original_PressureDischargeSetup) AND ([PressureSuc" +
                "tionSetup] = @Original_PressureSuctionSetup) AND ([HotBoxTemperature] = @Origina" +
                "l_HotBoxTemperature) AND ([CompressorLimitTemp] = @Original_CompressorLimitTemp)" +
                " AND ([RPMsetup] = @Original_RPMsetup) AND ((@IsNull_ECVOn = 1 AND [ECVOn] IS NU" +
                "LL) OR ([ECVOn] = @Original_ECVOn)) AND ((@IsNull_ECVOff = 1 AND [ECVOff] IS NUL" +
                "L) OR ([ECVOff] = @Original_ECVOff)) AND ((@IsNull_ECVHz = 1 AND [ECVHz] IS NULL" +
                ") OR ([ECVHz] = @Original_ECVHz)) AND ((@IsNull_ECVDC = 1 AND [ECVDC] IS NULL) O" +
                "R ([ECVDC] = @Original_ECVDC)) AND ((@IsNull_CoilOn = 1 AND [CoilOn] IS NULL) OR" +
                " ([CoilOn] = @Original_CoilOn)) AND ((@IsNull_CoilOff = 1 AND [CoilOff] IS NULL)" +
                " OR ([CoilOff] = @Original_CoilOff)));\r\nSELECT ID_TestSetup, TestName, Step, Req" +
                "uestedTime, PressureDischargeSetup, PressureSuctionSetup, HotBoxTemperature, Com" +
                "pressorLimitTemp, RPMsetup, ECVOn, ECVOff, ECVHz, ECVDC, CoilOn, CoilOff FROM Te" +
                "stDescriptionSetup WHERE (ID_TestSetup = @ID_TestSetup)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_TestSetup", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestSetup", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Step", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Step", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RequestedTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RequestedTime", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PressureDischargeSetup", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PressureDischargeSetup", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@PressureSuctionSetup", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PressureSuctionSetup", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HotBoxTemperature", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HotBoxTemperature", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CompressorLimitTemp", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompressorLimitTemp", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RPMsetup", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RPMsetup", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ECVOn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVOn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ECVOff", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVOff", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ECVHz", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVHz", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ECVDC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVDC", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CoilOn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilOn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CoilOff", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilOff", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_TestSetup", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestSetup", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestName", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Step", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Step", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RequestedTime", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RequestedTime", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PressureDischargeSetup", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PressureDischargeSetup", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_PressureSuctionSetup", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "PressureSuctionSetup", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HotBoxTemperature", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HotBoxTemperature", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CompressorLimitTemp", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CompressorLimitTemp", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RPMsetup", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RPMsetup", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ECVOn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVOn", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ECVOn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVOn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ECVOff", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVOff", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ECVOff", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVOff", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ECVHz", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVHz", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ECVHz", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVHz", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_ECVDC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVDC", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ECVDC", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVDC", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CoilOn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilOn", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CoilOn", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilOn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_CoilOff", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilOff", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CoilOff", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilOff", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Tester_VFS169.Properties.Settings.Default.DatabaseConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT ID_TestSetup, TestName, Step, RequestedTime, PressureDischargeSetup, Press" +
                "ureSuctionSetup, HotBoxTemperature, CompressorLimitTemp, RPMsetup, ECVOn, ECVOff" +
                ", ECVHz, ECVDC, CoilOn, CoilOff FROM dbo.TestDescriptionSetup";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DatabaseDataSet.TestDescriptionSetupDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DatabaseDataSet.TestDescriptionSetupDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DatabaseDataSet.TestDescriptionSetupDataTable dataTable = new DatabaseDataSet.TestDescriptionSetupDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DatabaseDataSet.TestDescriptionSetupDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DatabaseDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TestDescriptionSetup");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID_TestSetup, string Original_TestName, int Original_Step, int Original_RequestedTime, double Original_PressureDischargeSetup, double Original_PressureSuctionSetup, double Original_HotBoxTemperature, double Original_CompressorLimitTemp, int Original_RPMsetup, global::System.Nullable<int> Original_ECVOn, global::System.Nullable<int> Original_ECVOff, global::System.Nullable<int> Original_ECVHz, global::System.Nullable<int> Original_ECVDC, global::System.Nullable<int> Original_CoilOn, global::System.Nullable<int> Original_CoilOff) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID_TestSetup));
            if ((Original_TestName == null)) {
                throw new global::System.ArgumentNullException("Original_TestName");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((string)(Original_TestName));
            }
            this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_Step));
            this.Adapter.DeleteCommand.Parameters[3].Value = ((int)(Original_RequestedTime));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((double)(Original_PressureDischargeSetup));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((double)(Original_PressureSuctionSetup));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((double)(Original_HotBoxTemperature));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((double)(Original_CompressorLimitTemp));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((int)(Original_RPMsetup));
            if ((Original_ECVOn.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[10].Value = ((int)(Original_ECVOn.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((Original_ECVOff.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_ECVOff.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_ECVHz.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[14].Value = ((int)(Original_ECVHz.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            if ((Original_ECVDC.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[16].Value = ((int)(Original_ECVDC.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[15].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[16].Value = global::System.DBNull.Value;
            }
            if ((Original_CoilOn.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[18].Value = ((int)(Original_CoilOn.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            if ((Original_CoilOff.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[20].Value = ((int)(Original_CoilOff.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[19].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[20].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(int ID_TestSetup, string TestName, int Step, int RequestedTime, double PressureDischargeSetup, double PressureSuctionSetup, double HotBoxTemperature, double CompressorLimitTemp, int RPMsetup, global::System.Nullable<int> ECVOn, global::System.Nullable<int> ECVOff, global::System.Nullable<int> ECVHz, global::System.Nullable<int> ECVDC, global::System.Nullable<int> CoilOn, global::System.Nullable<int> CoilOff) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((int)(ID_TestSetup));
            if ((TestName == null)) {
                throw new global::System.ArgumentNullException("TestName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestName));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((int)(Step));
            this.Adapter.InsertCommand.Parameters[3].Value = ((int)(RequestedTime));
            this.Adapter.InsertCommand.Parameters[4].Value = ((double)(PressureDischargeSetup));
            this.Adapter.InsertCommand.Parameters[5].Value = ((double)(PressureSuctionSetup));
            this.Adapter.InsertCommand.Parameters[6].Value = ((double)(HotBoxTemperature));
            this.Adapter.InsertCommand.Parameters[7].Value = ((double)(CompressorLimitTemp));
            this.Adapter.InsertCommand.Parameters[8].Value = ((int)(RPMsetup));
            if ((ECVOn.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[9].Value = ((int)(ECVOn.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((ECVOff.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(ECVOff.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((ECVHz.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[11].Value = ((int)(ECVHz.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((ECVDC.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[12].Value = ((int)(ECVDC.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((CoilOn.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[13].Value = ((int)(CoilOn.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((CoilOff.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[14].Value = ((int)(CoilOff.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    int ID_TestSetup, 
                    string TestName, 
                    int Step, 
                    int RequestedTime, 
                    double PressureDischargeSetup, 
                    double PressureSuctionSetup, 
                    double HotBoxTemperature, 
                    double CompressorLimitTemp, 
                    int RPMsetup, 
                    global::System.Nullable<int> ECVOn, 
                    global::System.Nullable<int> ECVOff, 
                    global::System.Nullable<int> ECVHz, 
                    global::System.Nullable<int> ECVDC, 
                    global::System.Nullable<int> CoilOn, 
                    global::System.Nullable<int> CoilOff, 
                    int Original_ID_TestSetup, 
                    string Original_TestName, 
                    int Original_Step, 
                    int Original_RequestedTime, 
                    double Original_PressureDischargeSetup, 
                    double Original_PressureSuctionSetup, 
                    double Original_HotBoxTemperature, 
                    double Original_CompressorLimitTemp, 
                    int Original_RPMsetup, 
                    global::System.Nullable<int> Original_ECVOn, 
                    global::System.Nullable<int> Original_ECVOff, 
                    global::System.Nullable<int> Original_ECVHz, 
                    global::System.Nullable<int> Original_ECVDC, 
                    global::System.Nullable<int> Original_CoilOn, 
                    global::System.Nullable<int> Original_CoilOff) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(ID_TestSetup));
            if ((TestName == null)) {
                throw new global::System.ArgumentNullException("TestName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestName));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Step));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((int)(RequestedTime));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(PressureDischargeSetup));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(PressureSuctionSetup));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(HotBoxTemperature));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(CompressorLimitTemp));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(RPMsetup));
            if ((ECVOn.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(ECVOn.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = global::System.DBNull.Value;
            }
            if ((ECVOff.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(ECVOff.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            if ((ECVHz.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(ECVHz.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[11].Value = global::System.DBNull.Value;
            }
            if ((ECVDC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((int)(ECVDC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((CoilOn.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(CoilOn.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            if ((CoilOff.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[14].Value = ((int)(CoilOff.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[14].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[15].Value = ((int)(Original_ID_TestSetup));
            if ((Original_TestName == null)) {
                throw new global::System.ArgumentNullException("Original_TestName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_TestName));
            }
            this.Adapter.UpdateCommand.Parameters[17].Value = ((int)(Original_Step));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_RequestedTime));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((double)(Original_PressureDischargeSetup));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((double)(Original_PressureSuctionSetup));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((double)(Original_HotBoxTemperature));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((double)(Original_CompressorLimitTemp));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(Original_RPMsetup));
            if ((Original_ECVOn.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[25].Value = ((int)(Original_ECVOn.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[25].Value = global::System.DBNull.Value;
            }
            if ((Original_ECVOff.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Original_ECVOff.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[26].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[27].Value = global::System.DBNull.Value;
            }
            if ((Original_ECVHz.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[29].Value = ((int)(Original_ECVHz.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[28].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[29].Value = global::System.DBNull.Value;
            }
            if ((Original_ECVDC.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[31].Value = ((int)(Original_ECVDC.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[30].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[31].Value = global::System.DBNull.Value;
            }
            if ((Original_CoilOn.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[33].Value = ((int)(Original_CoilOn.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[32].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[33].Value = global::System.DBNull.Value;
            }
            if ((Original_CoilOff.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[35].Value = ((int)(Original_CoilOff.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[34].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[35].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string TestName, 
                    int Step, 
                    int RequestedTime, 
                    double PressureDischargeSetup, 
                    double PressureSuctionSetup, 
                    double HotBoxTemperature, 
                    double CompressorLimitTemp, 
                    int RPMsetup, 
                    global::System.Nullable<int> ECVOn, 
                    global::System.Nullable<int> ECVOff, 
                    global::System.Nullable<int> ECVHz, 
                    global::System.Nullable<int> ECVDC, 
                    global::System.Nullable<int> CoilOn, 
                    global::System.Nullable<int> CoilOff, 
                    int Original_ID_TestSetup, 
                    string Original_TestName, 
                    int Original_Step, 
                    int Original_RequestedTime, 
                    double Original_PressureDischargeSetup, 
                    double Original_PressureSuctionSetup, 
                    double Original_HotBoxTemperature, 
                    double Original_CompressorLimitTemp, 
                    int Original_RPMsetup, 
                    global::System.Nullable<int> Original_ECVOn, 
                    global::System.Nullable<int> Original_ECVOff, 
                    global::System.Nullable<int> Original_ECVHz, 
                    global::System.Nullable<int> Original_ECVDC, 
                    global::System.Nullable<int> Original_CoilOn, 
                    global::System.Nullable<int> Original_CoilOff) {
            return this.Update(Original_ID_TestSetup, TestName, Step, RequestedTime, PressureDischargeSetup, PressureSuctionSetup, HotBoxTemperature, CompressorLimitTemp, RPMsetup, ECVOn, ECVOff, ECVHz, ECVDC, CoilOn, CoilOff, Original_ID_TestSetup, Original_TestName, Original_Step, Original_RequestedTime, Original_PressureDischargeSetup, Original_PressureSuctionSetup, Original_HotBoxTemperature, Original_CompressorLimitTemp, Original_RPMsetup, Original_ECVOn, Original_ECVOff, Original_ECVHz, Original_ECVDC, Original_CoilOn, Original_CoilOff);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class TestParametersTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public TestParametersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "TestParameters";
            tableMapping.ColumnMappings.Add("ID_TestSetupParameters", "ID_TestSetupParameters");
            tableMapping.ColumnMappings.Add("TestInputID", "TestInputID");
            tableMapping.ColumnMappings.Add("Data", "Data");
            tableMapping.ColumnMappings.Add("Time", "Time");
            tableMapping.ColumnMappings.Add("Pdischarge", "Pdischarge");
            tableMapping.ColumnMappings.Add("Psuction", "Psuction");
            tableMapping.ColumnMappings.Add("Tdischarge", "Tdischarge");
            tableMapping.ColumnMappings.Add("Tsuction", "Tsuction");
            tableMapping.ColumnMappings.Add("TcondenserIn", "TcondenserIn");
            tableMapping.ColumnMappings.Add("TcondenserOut", "TcondenserOut");
            tableMapping.ColumnMappings.Add("TEvapuratorIn", "TEvapuratorIn");
            tableMapping.ColumnMappings.Add("TEvapuratorOut", "TEvapuratorOut");
            tableMapping.ColumnMappings.Add("TAirIn", "TAirIn");
            tableMapping.ColumnMappings.Add("TAirOut", "TAirOut");
            tableMapping.ColumnMappings.Add("HAirIn", "HAirIn");
            tableMapping.ColumnMappings.Add("HAirOut", "HAirOut");
            tableMapping.ColumnMappings.Add("TCompressor", "TCompressor");
            tableMapping.ColumnMappings.Add("THotbox", "THotbox");
            tableMapping.ColumnMappings.Add("RPM", "RPM");
            tableMapping.ColumnMappings.Add("CoilVoltage", "CoilVoltage");
            tableMapping.ColumnMappings.Add("CoilCurrent", "CoilCurrent");
            tableMapping.ColumnMappings.Add("ECVVoltage", "ECVVoltage");
            tableMapping.ColumnMappings.Add("ECVCurrent", "ECVCurrent");
            tableMapping.ColumnMappings.Add("ClutchTotalCycles", "ClutchTotalCycles");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[TestParameters] WHERE (([ID_TestSetupParameters] = @Original_ID_TestSetupParameters) AND ((@IsNull_TestInputID = 1 AND [TestInputID] IS NULL) OR ([TestInputID] = @Original_TestInputID)) AND ([Data] = @Original_Data) AND ([Time] = @Original_Time) AND ([Pdischarge] = @Original_Pdischarge) AND ([Psuction] = @Original_Psuction) AND ([Tdischarge] = @Original_Tdischarge) AND ([Tsuction] = @Original_Tsuction) AND ([TcondenserIn] = @Original_TcondenserIn) AND ([TcondenserOut] = @Original_TcondenserOut) AND ([TEvapuratorIn] = @Original_TEvapuratorIn) AND ([TEvapuratorOut] = @Original_TEvapuratorOut) AND ([TAirIn] = @Original_TAirIn) AND ([TAirOut] = @Original_TAirOut) AND ([HAirIn] = @Original_HAirIn) AND ([HAirOut] = @Original_HAirOut) AND ([TCompressor] = @Original_TCompressor) AND ([THotbox] = @Original_THotbox) AND ([RPM] = @Original_RPM) AND ([CoilVoltage] = @Original_CoilVoltage) AND ([CoilCurrent] = @Original_CoilCurrent) AND ([ECVVoltage] = @Original_ECVVoltage) AND ([ECVCurrent] = @Original_ECVCurrent) AND ([ClutchTotalCycles] = @Original_ClutchTotalCycles))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_TestSetupParameters", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestSetupParameters", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TestInputID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestInputID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestInputID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestInputID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Data", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Data", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Time", global::System.Data.SqlDbType.Time, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pdischarge", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pdischarge", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Psuction", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Psuction", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Tdischarge", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Tdischarge", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Tsuction", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Tsuction", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TcondenserIn", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TcondenserIn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TcondenserOut", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TcondenserOut", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TEvapuratorIn", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TEvapuratorIn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TEvapuratorOut", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TEvapuratorOut", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TAirIn", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TAirIn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TAirOut", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TAirOut", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HAirIn", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HAirIn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HAirOut", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HAirOut", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TCompressor", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TCompressor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_THotbox", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "THotbox", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RPM", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RPM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CoilVoltage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilVoltage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CoilCurrent", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilCurrent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ECVVoltage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVVoltage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ECVCurrent", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVCurrent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClutchTotalCycles", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClutchTotalCycles", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[TestParameters] ([ID_TestSetupParameters], [TestInputID], [Data], [Time], [Pdischarge], [Psuction], [Tdischarge], [Tsuction], [TcondenserIn], [TcondenserOut], [TEvapuratorIn], [TEvapuratorOut], [TAirIn], [TAirOut], [HAirIn], [HAirOut], [TCompressor], [THotbox], [RPM], [CoilVoltage], [CoilCurrent], [ECVVoltage], [ECVCurrent], [ClutchTotalCycles]) VALUES (@ID_TestSetupParameters, @TestInputID, @Data, @Time, @Pdischarge, @Psuction, @Tdischarge, @Tsuction, @TcondenserIn, @TcondenserOut, @TEvapuratorIn, @TEvapuratorOut, @TAirIn, @TAirOut, @HAirIn, @HAirOut, @TCompressor, @THotbox, @RPM, @CoilVoltage, @CoilCurrent, @ECVVoltage, @ECVCurrent, @ClutchTotalCycles);
SELECT ID_TestSetupParameters, TestInputID, Data, Time, Pdischarge, Psuction, Tdischarge, Tsuction, TcondenserIn, TcondenserOut, TEvapuratorIn, TEvapuratorOut, TAirIn, TAirOut, HAirIn, HAirOut, TCompressor, THotbox, RPM, CoilVoltage, CoilCurrent, ECVVoltage, ECVCurrent, ClutchTotalCycles FROM TestParameters WHERE (ID_TestSetupParameters = @ID_TestSetupParameters)";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_TestSetupParameters", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestSetupParameters", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestInputID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestInputID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Data", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Data", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Time", global::System.Data.SqlDbType.Time, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pdischarge", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pdischarge", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Psuction", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Psuction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Tdischarge", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Tdischarge", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Tsuction", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Tsuction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TcondenserIn", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TcondenserIn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TcondenserOut", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TcondenserOut", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TEvapuratorIn", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TEvapuratorIn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TEvapuratorOut", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TEvapuratorOut", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TAirIn", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TAirIn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TAirOut", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TAirOut", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HAirIn", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HAirIn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HAirOut", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HAirOut", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TCompressor", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TCompressor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@THotbox", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "THotbox", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RPM", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RPM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CoilVoltage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilVoltage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CoilCurrent", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilCurrent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ECVVoltage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVVoltage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ECVCurrent", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVCurrent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClutchTotalCycles", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClutchTotalCycles", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TestParameters] SET [ID_TestSetupParameters] = @ID_TestSetupParamet" +
                "ers, [TestInputID] = @TestInputID, [Data] = @Data, [Time] = @Time, [Pdischarge] " +
                "= @Pdischarge, [Psuction] = @Psuction, [Tdischarge] = @Tdischarge, [Tsuction] = " +
                "@Tsuction, [TcondenserIn] = @TcondenserIn, [TcondenserOut] = @TcondenserOut, [TE" +
                "vapuratorIn] = @TEvapuratorIn, [TEvapuratorOut] = @TEvapuratorOut, [TAirIn] = @T" +
                "AirIn, [TAirOut] = @TAirOut, [HAirIn] = @HAirIn, [HAirOut] = @HAirOut, [TCompres" +
                "sor] = @TCompressor, [THotbox] = @THotbox, [RPM] = @RPM, [CoilVoltage] = @CoilVo" +
                "ltage, [CoilCurrent] = @CoilCurrent, [ECVVoltage] = @ECVVoltage, [ECVCurrent] = " +
                "@ECVCurrent, [ClutchTotalCycles] = @ClutchTotalCycles WHERE (([ID_TestSetupParam" +
                "eters] = @Original_ID_TestSetupParameters) AND ((@IsNull_TestInputID = 1 AND [Te" +
                "stInputID] IS NULL) OR ([TestInputID] = @Original_TestInputID)) AND ([Data] = @O" +
                "riginal_Data) AND ([Time] = @Original_Time) AND ([Pdischarge] = @Original_Pdisch" +
                "arge) AND ([Psuction] = @Original_Psuction) AND ([Tdischarge] = @Original_Tdisch" +
                "arge) AND ([Tsuction] = @Original_Tsuction) AND ([TcondenserIn] = @Original_Tcon" +
                "denserIn) AND ([TcondenserOut] = @Original_TcondenserOut) AND ([TEvapuratorIn] =" +
                " @Original_TEvapuratorIn) AND ([TEvapuratorOut] = @Original_TEvapuratorOut) AND " +
                "([TAirIn] = @Original_TAirIn) AND ([TAirOut] = @Original_TAirOut) AND ([HAirIn] " +
                "= @Original_HAirIn) AND ([HAirOut] = @Original_HAirOut) AND ([TCompressor] = @Or" +
                "iginal_TCompressor) AND ([THotbox] = @Original_THotbox) AND ([RPM] = @Original_R" +
                "PM) AND ([CoilVoltage] = @Original_CoilVoltage) AND ([CoilCurrent] = @Original_C" +
                "oilCurrent) AND ([ECVVoltage] = @Original_ECVVoltage) AND ([ECVCurrent] = @Origi" +
                "nal_ECVCurrent) AND ([ClutchTotalCycles] = @Original_ClutchTotalCycles));\r\nSELEC" +
                "T ID_TestSetupParameters, TestInputID, Data, Time, Pdischarge, Psuction, Tdischa" +
                "rge, Tsuction, TcondenserIn, TcondenserOut, TEvapuratorIn, TEvapuratorOut, TAirI" +
                "n, TAirOut, HAirIn, HAirOut, TCompressor, THotbox, RPM, CoilVoltage, CoilCurrent" +
                ", ECVVoltage, ECVCurrent, ClutchTotalCycles FROM TestParameters WHERE (ID_TestSe" +
                "tupParameters = @ID_TestSetupParameters)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ID_TestSetupParameters", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestSetupParameters", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TestInputID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestInputID", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Data", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Data", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Time", global::System.Data.SqlDbType.Time, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Time", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Pdischarge", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pdischarge", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Psuction", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Psuction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Tdischarge", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Tdischarge", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Tsuction", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Tsuction", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TcondenserIn", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TcondenserIn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TcondenserOut", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TcondenserOut", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TEvapuratorIn", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TEvapuratorIn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TEvapuratorOut", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TEvapuratorOut", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TAirIn", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TAirIn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TAirOut", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TAirOut", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HAirIn", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HAirIn", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HAirOut", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HAirOut", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@TCompressor", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TCompressor", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@THotbox", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "THotbox", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@RPM", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RPM", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CoilVoltage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilVoltage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@CoilCurrent", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilCurrent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ECVVoltage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVVoltage", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ECVCurrent", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVCurrent", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClutchTotalCycles", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClutchTotalCycles", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ID_TestSetupParameters", global::System.Data.SqlDbType.Money, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ID_TestSetupParameters", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_TestInputID", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestInputID", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TestInputID", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TestInputID", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Data", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Data", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Time", global::System.Data.SqlDbType.Time, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Time", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Pdischarge", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Pdischarge", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Psuction", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Psuction", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Tdischarge", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Tdischarge", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Tsuction", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Tsuction", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TcondenserIn", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TcondenserIn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TcondenserOut", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TcondenserOut", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TEvapuratorIn", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TEvapuratorIn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TEvapuratorOut", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TEvapuratorOut", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TAirIn", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TAirIn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TAirOut", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TAirOut", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HAirIn", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HAirIn", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_HAirOut", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HAirOut", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_TCompressor", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "TCompressor", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_THotbox", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "THotbox", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_RPM", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "RPM", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CoilVoltage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilVoltage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_CoilCurrent", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "CoilCurrent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ECVVoltage", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVVoltage", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ECVCurrent", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ECVCurrent", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClutchTotalCycles", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClutchTotalCycles", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Tester_VFS169.Properties.Settings.Default.DatabaseConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ID_TestSetupParameters, TestInputID, Data, Time, Pdischarge, Psuction, Tdischarge, Tsuction, TcondenserIn, TcondenserOut, TEvapuratorIn, TEvapuratorOut, TAirIn, TAirOut, HAirIn, HAirOut, TCompressor, THotbox, RPM, CoilVoltage, CoilCurrent, ECVVoltage, ECVCurrent, ClutchTotalCycles FROM dbo.TestParameters";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DatabaseDataSet.TestParametersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DatabaseDataSet.TestParametersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DatabaseDataSet.TestParametersDataTable dataTable = new DatabaseDataSet.TestParametersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DatabaseDataSet.TestParametersDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DatabaseDataSet dataSet) {
            return this.Adapter.Update(dataSet, "TestParameters");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    decimal Original_ID_TestSetupParameters, 
                    string Original_TestInputID, 
                    System.DateTime Original_Data, 
                    System.TimeSpan Original_Time, 
                    double Original_Pdischarge, 
                    double Original_Psuction, 
                    double Original_Tdischarge, 
                    double Original_Tsuction, 
                    double Original_TcondenserIn, 
                    double Original_TcondenserOut, 
                    double Original_TEvapuratorIn, 
                    double Original_TEvapuratorOut, 
                    double Original_TAirIn, 
                    double Original_TAirOut, 
                    double Original_HAirIn, 
                    double Original_HAirOut, 
                    double Original_TCompressor, 
                    double Original_THotbox, 
                    double Original_RPM, 
                    double Original_CoilVoltage, 
                    double Original_CoilCurrent, 
                    double Original_ECVVoltage, 
                    double Original_ECVCurrent, 
                    int Original_ClutchTotalCycles) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((decimal)(Original_ID_TestSetupParameters));
            if ((Original_TestInputID == null)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((string)(Original_TestInputID));
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_Data));
            this.Adapter.DeleteCommand.Parameters[4].Value = ((System.TimeSpan)(Original_Time));
            this.Adapter.DeleteCommand.Parameters[5].Value = ((double)(Original_Pdischarge));
            this.Adapter.DeleteCommand.Parameters[6].Value = ((double)(Original_Psuction));
            this.Adapter.DeleteCommand.Parameters[7].Value = ((double)(Original_Tdischarge));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((double)(Original_Tsuction));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((double)(Original_TcondenserIn));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((double)(Original_TcondenserOut));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((double)(Original_TEvapuratorIn));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_TEvapuratorOut));
            this.Adapter.DeleteCommand.Parameters[13].Value = ((double)(Original_TAirIn));
            this.Adapter.DeleteCommand.Parameters[14].Value = ((double)(Original_TAirOut));
            this.Adapter.DeleteCommand.Parameters[15].Value = ((double)(Original_HAirIn));
            this.Adapter.DeleteCommand.Parameters[16].Value = ((double)(Original_HAirOut));
            this.Adapter.DeleteCommand.Parameters[17].Value = ((double)(Original_TCompressor));
            this.Adapter.DeleteCommand.Parameters[18].Value = ((double)(Original_THotbox));
            this.Adapter.DeleteCommand.Parameters[19].Value = ((double)(Original_RPM));
            this.Adapter.DeleteCommand.Parameters[20].Value = ((double)(Original_CoilVoltage));
            this.Adapter.DeleteCommand.Parameters[21].Value = ((double)(Original_CoilCurrent));
            this.Adapter.DeleteCommand.Parameters[22].Value = ((double)(Original_ECVVoltage));
            this.Adapter.DeleteCommand.Parameters[23].Value = ((double)(Original_ECVCurrent));
            this.Adapter.DeleteCommand.Parameters[24].Value = ((int)(Original_ClutchTotalCycles));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    decimal ID_TestSetupParameters, 
                    string TestInputID, 
                    System.DateTime Data, 
                    System.TimeSpan Time, 
                    double Pdischarge, 
                    double Psuction, 
                    double Tdischarge, 
                    double Tsuction, 
                    double TcondenserIn, 
                    double TcondenserOut, 
                    double TEvapuratorIn, 
                    double TEvapuratorOut, 
                    double TAirIn, 
                    double TAirOut, 
                    double HAirIn, 
                    double HAirOut, 
                    double TCompressor, 
                    double THotbox, 
                    double RPM, 
                    double CoilVoltage, 
                    double CoilCurrent, 
                    double ECVVoltage, 
                    double ECVCurrent, 
                    int ClutchTotalCycles) {
            this.Adapter.InsertCommand.Parameters[0].Value = ((decimal)(ID_TestSetupParameters));
            if ((TestInputID == null)) {
                this.Adapter.InsertCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(TestInputID));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((System.DateTime)(Data));
            this.Adapter.InsertCommand.Parameters[3].Value = ((System.TimeSpan)(Time));
            this.Adapter.InsertCommand.Parameters[4].Value = ((double)(Pdischarge));
            this.Adapter.InsertCommand.Parameters[5].Value = ((double)(Psuction));
            this.Adapter.InsertCommand.Parameters[6].Value = ((double)(Tdischarge));
            this.Adapter.InsertCommand.Parameters[7].Value = ((double)(Tsuction));
            this.Adapter.InsertCommand.Parameters[8].Value = ((double)(TcondenserIn));
            this.Adapter.InsertCommand.Parameters[9].Value = ((double)(TcondenserOut));
            this.Adapter.InsertCommand.Parameters[10].Value = ((double)(TEvapuratorIn));
            this.Adapter.InsertCommand.Parameters[11].Value = ((double)(TEvapuratorOut));
            this.Adapter.InsertCommand.Parameters[12].Value = ((double)(TAirIn));
            this.Adapter.InsertCommand.Parameters[13].Value = ((double)(TAirOut));
            this.Adapter.InsertCommand.Parameters[14].Value = ((double)(HAirIn));
            this.Adapter.InsertCommand.Parameters[15].Value = ((double)(HAirOut));
            this.Adapter.InsertCommand.Parameters[16].Value = ((double)(TCompressor));
            this.Adapter.InsertCommand.Parameters[17].Value = ((double)(THotbox));
            this.Adapter.InsertCommand.Parameters[18].Value = ((double)(RPM));
            this.Adapter.InsertCommand.Parameters[19].Value = ((double)(CoilVoltage));
            this.Adapter.InsertCommand.Parameters[20].Value = ((double)(CoilCurrent));
            this.Adapter.InsertCommand.Parameters[21].Value = ((double)(ECVVoltage));
            this.Adapter.InsertCommand.Parameters[22].Value = ((double)(ECVCurrent));
            this.Adapter.InsertCommand.Parameters[23].Value = ((int)(ClutchTotalCycles));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    decimal ID_TestSetupParameters, 
                    string TestInputID, 
                    System.DateTime Data, 
                    System.TimeSpan Time, 
                    double Pdischarge, 
                    double Psuction, 
                    double Tdischarge, 
                    double Tsuction, 
                    double TcondenserIn, 
                    double TcondenserOut, 
                    double TEvapuratorIn, 
                    double TEvapuratorOut, 
                    double TAirIn, 
                    double TAirOut, 
                    double HAirIn, 
                    double HAirOut, 
                    double TCompressor, 
                    double THotbox, 
                    double RPM, 
                    double CoilVoltage, 
                    double CoilCurrent, 
                    double ECVVoltage, 
                    double ECVCurrent, 
                    int ClutchTotalCycles, 
                    decimal Original_ID_TestSetupParameters, 
                    string Original_TestInputID, 
                    System.DateTime Original_Data, 
                    System.TimeSpan Original_Time, 
                    double Original_Pdischarge, 
                    double Original_Psuction, 
                    double Original_Tdischarge, 
                    double Original_Tsuction, 
                    double Original_TcondenserIn, 
                    double Original_TcondenserOut, 
                    double Original_TEvapuratorIn, 
                    double Original_TEvapuratorOut, 
                    double Original_TAirIn, 
                    double Original_TAirOut, 
                    double Original_HAirIn, 
                    double Original_HAirOut, 
                    double Original_TCompressor, 
                    double Original_THotbox, 
                    double Original_RPM, 
                    double Original_CoilVoltage, 
                    double Original_CoilCurrent, 
                    double Original_ECVVoltage, 
                    double Original_ECVCurrent, 
                    int Original_ClutchTotalCycles) {
            this.Adapter.UpdateCommand.Parameters[0].Value = ((decimal)(ID_TestSetupParameters));
            if ((TestInputID == null)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(TestInputID));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((System.DateTime)(Data));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((System.TimeSpan)(Time));
            this.Adapter.UpdateCommand.Parameters[4].Value = ((double)(Pdischarge));
            this.Adapter.UpdateCommand.Parameters[5].Value = ((double)(Psuction));
            this.Adapter.UpdateCommand.Parameters[6].Value = ((double)(Tdischarge));
            this.Adapter.UpdateCommand.Parameters[7].Value = ((double)(Tsuction));
            this.Adapter.UpdateCommand.Parameters[8].Value = ((double)(TcondenserIn));
            this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(TcondenserOut));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(TEvapuratorIn));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(TEvapuratorOut));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((double)(TAirIn));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((double)(TAirOut));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((double)(HAirIn));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((double)(HAirOut));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((double)(TCompressor));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((double)(THotbox));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((double)(RPM));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((double)(CoilVoltage));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((double)(CoilCurrent));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((double)(ECVVoltage));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((double)(ECVCurrent));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(ClutchTotalCycles));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((decimal)(Original_ID_TestSetupParameters));
            if ((Original_TestInputID == null)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((string)(Original_TestInputID));
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((System.DateTime)(Original_Data));
            this.Adapter.UpdateCommand.Parameters[28].Value = ((System.TimeSpan)(Original_Time));
            this.Adapter.UpdateCommand.Parameters[29].Value = ((double)(Original_Pdischarge));
            this.Adapter.UpdateCommand.Parameters[30].Value = ((double)(Original_Psuction));
            this.Adapter.UpdateCommand.Parameters[31].Value = ((double)(Original_Tdischarge));
            this.Adapter.UpdateCommand.Parameters[32].Value = ((double)(Original_Tsuction));
            this.Adapter.UpdateCommand.Parameters[33].Value = ((double)(Original_TcondenserIn));
            this.Adapter.UpdateCommand.Parameters[34].Value = ((double)(Original_TcondenserOut));
            this.Adapter.UpdateCommand.Parameters[35].Value = ((double)(Original_TEvapuratorIn));
            this.Adapter.UpdateCommand.Parameters[36].Value = ((double)(Original_TEvapuratorOut));
            this.Adapter.UpdateCommand.Parameters[37].Value = ((double)(Original_TAirIn));
            this.Adapter.UpdateCommand.Parameters[38].Value = ((double)(Original_TAirOut));
            this.Adapter.UpdateCommand.Parameters[39].Value = ((double)(Original_HAirIn));
            this.Adapter.UpdateCommand.Parameters[40].Value = ((double)(Original_HAirOut));
            this.Adapter.UpdateCommand.Parameters[41].Value = ((double)(Original_TCompressor));
            this.Adapter.UpdateCommand.Parameters[42].Value = ((double)(Original_THotbox));
            this.Adapter.UpdateCommand.Parameters[43].Value = ((double)(Original_RPM));
            this.Adapter.UpdateCommand.Parameters[44].Value = ((double)(Original_CoilVoltage));
            this.Adapter.UpdateCommand.Parameters[45].Value = ((double)(Original_CoilCurrent));
            this.Adapter.UpdateCommand.Parameters[46].Value = ((double)(Original_ECVVoltage));
            this.Adapter.UpdateCommand.Parameters[47].Value = ((double)(Original_ECVCurrent));
            this.Adapter.UpdateCommand.Parameters[48].Value = ((int)(Original_ClutchTotalCycles));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string TestInputID, 
                    System.DateTime Data, 
                    System.TimeSpan Time, 
                    double Pdischarge, 
                    double Psuction, 
                    double Tdischarge, 
                    double Tsuction, 
                    double TcondenserIn, 
                    double TcondenserOut, 
                    double TEvapuratorIn, 
                    double TEvapuratorOut, 
                    double TAirIn, 
                    double TAirOut, 
                    double HAirIn, 
                    double HAirOut, 
                    double TCompressor, 
                    double THotbox, 
                    double RPM, 
                    double CoilVoltage, 
                    double CoilCurrent, 
                    double ECVVoltage, 
                    double ECVCurrent, 
                    int ClutchTotalCycles, 
                    decimal Original_ID_TestSetupParameters, 
                    string Original_TestInputID, 
                    System.DateTime Original_Data, 
                    System.TimeSpan Original_Time, 
                    double Original_Pdischarge, 
                    double Original_Psuction, 
                    double Original_Tdischarge, 
                    double Original_Tsuction, 
                    double Original_TcondenserIn, 
                    double Original_TcondenserOut, 
                    double Original_TEvapuratorIn, 
                    double Original_TEvapuratorOut, 
                    double Original_TAirIn, 
                    double Original_TAirOut, 
                    double Original_HAirIn, 
                    double Original_HAirOut, 
                    double Original_TCompressor, 
                    double Original_THotbox, 
                    double Original_RPM, 
                    double Original_CoilVoltage, 
                    double Original_CoilCurrent, 
                    double Original_ECVVoltage, 
                    double Original_ECVCurrent, 
                    int Original_ClutchTotalCycles) {
            return this.Update(Original_ID_TestSetupParameters, TestInputID, Data, Time, Pdischarge, Psuction, Tdischarge, Tsuction, TcondenserIn, TcondenserOut, TEvapuratorIn, TEvapuratorOut, TAirIn, TAirOut, HAirIn, HAirOut, TCompressor, THotbox, RPM, CoilVoltage, CoilCurrent, ECVVoltage, ECVCurrent, ClutchTotalCycles, Original_ID_TestSetupParameters, Original_TestInputID, Original_Data, Original_Time, Original_Pdischarge, Original_Psuction, Original_Tdischarge, Original_Tsuction, Original_TcondenserIn, Original_TcondenserOut, Original_TEvapuratorIn, Original_TEvapuratorOut, Original_TAirIn, Original_TAirOut, Original_HAirIn, Original_HAirOut, Original_TCompressor, Original_THotbox, Original_RPM, Original_CoilVoltage, Original_CoilCurrent, Original_ECVVoltage, Original_ECVCurrent, Original_ClutchTotalCycles);
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ShotTestInfoTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ShotTestInfoTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ShotTestInfo";
            tableMapping.ColumnMappings.Add("TestNameInput", "TestNameInput");
            tableMapping.ColumnMappings.Add("CompressorDescription", "CompressorDescription");
            tableMapping.ColumnMappings.Add("Requester", "Requester");
            tableMapping.ColumnMappings.Add("StartDate", "StartDate");
            tableMapping.ColumnMappings.Add("Data", "Data");
            tableMapping.ColumnMappings.Add("Comments", "Comments");
            tableMapping.ColumnMappings.Add("TestName", "TestName");
            tableMapping.ColumnMappings.Add("Step", "Step");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Tester_VFS169.Properties.Settings.Default.DatabaseConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT TestNameInput, CompressorDescription, Requester, StartDate, Data, Comments" +
                ", TestName, Step FROM dbo.ShotTestInfo";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DatabaseDataSet.ShotTestInfoDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DatabaseDataSet.ShotTestInfoDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DatabaseDataSet.ShotTestInfoDataTable dataTable = new DatabaseDataSet.ShotTestInfoDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ToReportAllParametersTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public ToReportAllParametersTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ToReportAllParameters";
            tableMapping.ColumnMappings.Add("ID_TestInput", "ID_TestInput");
            tableMapping.ColumnMappings.Add("TestNameInput", "TestNameInput");
            tableMapping.ColumnMappings.Add("StartDate", "StartDate");
            tableMapping.ColumnMappings.Add("CompressorDescription", "CompressorDescription");
            tableMapping.ColumnMappings.Add("Requester", "Requester");
            tableMapping.ColumnMappings.Add("CompressorPass", "CompressorPass");
            tableMapping.ColumnMappings.Add("FinishDate", "FinishDate");
            tableMapping.ColumnMappings.Add("Comments", "Comments");
            tableMapping.ColumnMappings.Add("ID_TestDescSetup", "ID_TestDescSetup");
            tableMapping.ColumnMappings.Add("ID_TestSetup", "ID_TestSetup");
            tableMapping.ColumnMappings.Add("TestName", "TestName");
            tableMapping.ColumnMappings.Add("Step", "Step");
            tableMapping.ColumnMappings.Add("RequestedTime", "RequestedTime");
            tableMapping.ColumnMappings.Add("PressureDischargeSetup", "PressureDischargeSetup");
            tableMapping.ColumnMappings.Add("PressureSuctionSetup", "PressureSuctionSetup");
            tableMapping.ColumnMappings.Add("HotBoxTemperature", "HotBoxTemperature");
            tableMapping.ColumnMappings.Add("CompressorLimitTemp", "CompressorLimitTemp");
            tableMapping.ColumnMappings.Add("RPMsetup", "RPMsetup");
            tableMapping.ColumnMappings.Add("ECVOn", "ECVOn");
            tableMapping.ColumnMappings.Add("ECVOff", "ECVOff");
            tableMapping.ColumnMappings.Add("ECVHz", "ECVHz");
            tableMapping.ColumnMappings.Add("ECVDC", "ECVDC");
            tableMapping.ColumnMappings.Add("CoilOn", "CoilOn");
            tableMapping.ColumnMappings.Add("CoilOff", "CoilOff");
            tableMapping.ColumnMappings.Add("Expr2", "Expr2");
            tableMapping.ColumnMappings.Add("Expr3", "Expr3");
            tableMapping.ColumnMappings.Add("Expr4", "Expr4");
            tableMapping.ColumnMappings.Add("Expr5", "Expr5");
            tableMapping.ColumnMappings.Add("Expr6", "Expr6");
            tableMapping.ColumnMappings.Add("Pdischarge", "Pdischarge");
            tableMapping.ColumnMappings.Add("Psuction", "Psuction");
            tableMapping.ColumnMappings.Add("Tdischarge", "Tdischarge");
            tableMapping.ColumnMappings.Add("Tsuction", "Tsuction");
            tableMapping.ColumnMappings.Add("TcondenserIn", "TcondenserIn");
            tableMapping.ColumnMappings.Add("TcondenserOut", "TcondenserOut");
            tableMapping.ColumnMappings.Add("TEvapuratorIn", "TEvapuratorIn");
            tableMapping.ColumnMappings.Add("TEvapuratorOut", "TEvapuratorOut");
            tableMapping.ColumnMappings.Add("TAirIn", "TAirIn");
            tableMapping.ColumnMappings.Add("TAirOut", "TAirOut");
            tableMapping.ColumnMappings.Add("HAirIn", "HAirIn");
            tableMapping.ColumnMappings.Add("HAirOut", "HAirOut");
            tableMapping.ColumnMappings.Add("TCompressor", "TCompressor");
            tableMapping.ColumnMappings.Add("THotbox", "THotbox");
            tableMapping.ColumnMappings.Add("RPM", "RPM");
            tableMapping.ColumnMappings.Add("CoilVoltage", "CoilVoltage");
            tableMapping.ColumnMappings.Add("CoilCurrent", "CoilCurrent");
            tableMapping.ColumnMappings.Add("ECVVoltage", "ECVVoltage");
            tableMapping.ColumnMappings.Add("ClutchTotalCycles", "ClutchTotalCycles");
            tableMapping.ColumnMappings.Add("ECVCurrent", "ECVCurrent");
            tableMapping.ColumnMappings.Add("ID_Comments", "ID_Comments");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::Tester_VFS169.Properties.Settings.Default.DatabaseConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT ID_TestInput, TestNameInput, StartDate, CompressorDescription, Requester, CompressorPass, FinishDate, Comments, ID_TestDescSetup, ID_TestSetup, TestName, Step, RequestedTime, PressureDischargeSetup, PressureSuctionSetup, HotBoxTemperature, CompressorLimitTemp, RPMsetup, ECVOn, ECVOff, ECVHz, ECVDC, CoilOn, CoilOff, Expr2, Expr3, Expr4, Expr5, Expr6, Pdischarge, Psuction, Tdischarge, Tsuction, TcondenserIn, TcondenserOut, TEvapuratorIn, TEvapuratorOut, TAirIn, TAirOut, HAirIn, HAirOut, TCompressor, THotbox, RPM, CoilVoltage, CoilCurrent, ECVVoltage, ClutchTotalCycles, ECVCurrent, ID_Comments FROM dbo.ToReportAllParameters";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DatabaseDataSet.ToReportAllParametersDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual DatabaseDataSet.ToReportAllParametersDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            DatabaseDataSet.ToReportAllParametersDataTable dataTable = new DatabaseDataSet.ToReportAllParametersDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private TestCommentsTableAdapter _testCommentsTableAdapter;
        
        private TestDescriptionInputTableAdapter _testDescriptionInputTableAdapter;
        
        private TestDescriptionSetupTableAdapter _testDescriptionSetupTableAdapter;
        
        private TestParametersTableAdapter _testParametersTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public TestCommentsTableAdapter TestCommentsTableAdapter {
            get {
                return this._testCommentsTableAdapter;
            }
            set {
                this._testCommentsTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public TestDescriptionInputTableAdapter TestDescriptionInputTableAdapter {
            get {
                return this._testDescriptionInputTableAdapter;
            }
            set {
                this._testDescriptionInputTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public TestDescriptionSetupTableAdapter TestDescriptionSetupTableAdapter {
            get {
                return this._testDescriptionSetupTableAdapter;
            }
            set {
                this._testDescriptionSetupTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public TestParametersTableAdapter TestParametersTableAdapter {
            get {
                return this._testParametersTableAdapter;
            }
            set {
                this._testParametersTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._testCommentsTableAdapter != null) 
                            && (this._testCommentsTableAdapter.Connection != null))) {
                    return this._testCommentsTableAdapter.Connection;
                }
                if (((this._testDescriptionInputTableAdapter != null) 
                            && (this._testDescriptionInputTableAdapter.Connection != null))) {
                    return this._testDescriptionInputTableAdapter.Connection;
                }
                if (((this._testDescriptionSetupTableAdapter != null) 
                            && (this._testDescriptionSetupTableAdapter.Connection != null))) {
                    return this._testDescriptionSetupTableAdapter.Connection;
                }
                if (((this._testParametersTableAdapter != null) 
                            && (this._testParametersTableAdapter.Connection != null))) {
                    return this._testParametersTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._testCommentsTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._testDescriptionInputTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._testDescriptionSetupTableAdapter != null)) {
                    count = (count + 1);
                }
                if ((this._testParametersTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(DatabaseDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._testDescriptionSetupTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TestDescriptionSetup.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._testDescriptionSetupTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._testDescriptionInputTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TestDescriptionInput.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._testDescriptionInputTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._testCommentsTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TestComments.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._testCommentsTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            if ((this._testParametersTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.TestParameters.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._testParametersTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(DatabaseDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._testDescriptionSetupTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TestDescriptionSetup.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._testDescriptionSetupTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._testDescriptionInputTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TestDescriptionInput.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._testDescriptionInputTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._testCommentsTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TestComments.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._testCommentsTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            if ((this._testParametersTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.TestParameters.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._testParametersTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(DatabaseDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._testParametersTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TestParameters.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._testParametersTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._testCommentsTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TestComments.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._testCommentsTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._testDescriptionInputTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TestDescriptionInput.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._testDescriptionInputTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            if ((this._testDescriptionSetupTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.TestDescriptionSetup.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._testDescriptionSetupTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(DatabaseDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._testCommentsTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._testCommentsTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._testDescriptionInputTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._testDescriptionInputTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._testDescriptionSetupTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._testDescriptionSetupTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            if (((this._testParametersTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._testParametersTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._testCommentsTableAdapter != null)) {
                    revertConnections.Add(this._testCommentsTableAdapter, this._testCommentsTableAdapter.Connection);
                    this._testCommentsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._testCommentsTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._testCommentsTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._testCommentsTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._testCommentsTableAdapter.Adapter);
                    }
                }
                if ((this._testDescriptionInputTableAdapter != null)) {
                    revertConnections.Add(this._testDescriptionInputTableAdapter, this._testDescriptionInputTableAdapter.Connection);
                    this._testDescriptionInputTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._testDescriptionInputTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._testDescriptionInputTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._testDescriptionInputTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._testDescriptionInputTableAdapter.Adapter);
                    }
                }
                if ((this._testDescriptionSetupTableAdapter != null)) {
                    revertConnections.Add(this._testDescriptionSetupTableAdapter, this._testDescriptionSetupTableAdapter.Connection);
                    this._testDescriptionSetupTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._testDescriptionSetupTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._testDescriptionSetupTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._testDescriptionSetupTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._testDescriptionSetupTableAdapter.Adapter);
                    }
                }
                if ((this._testParametersTableAdapter != null)) {
                    revertConnections.Add(this._testParametersTableAdapter, this._testParametersTableAdapter.Connection);
                    this._testParametersTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._testParametersTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._testParametersTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._testParametersTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._testParametersTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._testCommentsTableAdapter != null)) {
                    this._testCommentsTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._testCommentsTableAdapter]));
                    this._testCommentsTableAdapter.Transaction = null;
                }
                if ((this._testDescriptionInputTableAdapter != null)) {
                    this._testDescriptionInputTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._testDescriptionInputTableAdapter]));
                    this._testDescriptionInputTableAdapter.Transaction = null;
                }
                if ((this._testDescriptionSetupTableAdapter != null)) {
                    this._testDescriptionSetupTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._testDescriptionSetupTableAdapter]));
                    this._testDescriptionSetupTableAdapter.Transaction = null;
                }
                if ((this._testParametersTableAdapter != null)) {
                    this._testParametersTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._testParametersTableAdapter]));
                    this._testParametersTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591